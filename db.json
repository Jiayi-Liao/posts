{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/assets/EWAH.png","path":"assets/EWAH.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/RunContainerFlow.png","path":"assets/RunContainerFlow.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/aerospike0.png","path":"assets/aerospike0.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/avatar.jpg","path":"assets/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/assets/kafka-consumer-structure.png","path":"assets/kafka-consumer-structure.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/CONCISE.png","path":"assets/CONCISE.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/RoaringBitmap_basic.png","path":"assets/RoaringBitmap_basic.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/WAH.png","path":"assets/WAH.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/flink-2.png","path":"assets/flink-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/assets/flink-3.png","path":"assets/flink-3.png","modified":1,"renderable":1},{"_id":"source/images/DASHENG-900x700-1.png","path":"images/DASHENG-900x700-1.png","modified":1,"renderable":0},{"_id":"themes/next/source/assets/flink-1.png","path":"assets/flink-1.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/DASHENG-900x700-2.png","path":"images/DASHENG-900x700-2.png","modified":1,"renderable":0},{"_id":"source/images/DASHENG-900x700-4.png","path":"images/DASHENG-900x700-4.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/DASHENG-900x700-3.png","path":"images/DASHENG-900x700-3.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/hexo-admin-ehc-images.json","hash":"0d165d7223eabfe5ebab834a5d89c8cb9731b5ff","modified":1531910598019},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"3c7982849008bb19e58de9d530379599569b5d65","modified":1531914403367},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/.git/COMMIT_EDITMSG","hash":"ba8549b556a02ad80429f21137fce773d50e437b","modified":1531910598064},{"_id":"source/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531910598076},{"_id":"source/.git/config","hash":"a7af0e4ae6add378ead3e2408b38fc9ec2331502","modified":1531910598075},{"_id":"source/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531910598087},{"_id":"source/.git/index","hash":"1f5b6345e0b4dbea6cd36732fc9b6ad27673016b","modified":1531910598072},{"_id":"source/_posts/aerospike-write.md","hash":"9e9d7e3619f6b445e846ec637e24a320dcacbfc5","modified":1531910598423},{"_id":"source/_posts/aerospike.md","hash":"574500ebde8ee05aedc13cd83ea4d7006a7214ef","modified":1531910598369},{"_id":"source/_posts/bitmap.md","hash":"d986bec1f2bbc729db1d183d0aeea059720c7c95","modified":1531910598441},{"_id":"source/_posts/flink-exactly-once.md","hash":"496b085c0ee788868b0cb53dc2011b185c431ae4","modified":1531910598428},{"_id":"source/_posts/hs-err-pid-log.md","hash":"adab2ad6ca96a0391cd0fe70d794f1e4f33b83a3","modified":1531910598426},{"_id":"source/about/index.md","hash":"9e4dc815028e55480b89ef6c3a7948cd93d8cd6c","modified":1531910598025},{"_id":"source/tags/index.md","hash":"e7f8e3ada89407cb9dbdcccb14f4b49c0f6f0c92","modified":1531910598016},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1531910598027},{"_id":"source/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531910598033},{"_id":"source/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531910598032},{"_id":"source/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1531910598031},{"_id":"source/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1531910598034},{"_id":"source/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1531910598029},{"_id":"source/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1531910598026},{"_id":"source/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1531910598036},{"_id":"source/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1531910598035},{"_id":"source/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1531910598088},{"_id":"source/.git/logs/HEAD","hash":"b7b2418691a1e09ca149dd3e316fab9a9b8ef8bb","modified":1531910598082},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/assets/EWAH.png","hash":"b6a2167ac71bed7903787d687fca0c06aa423c4b","modified":1531913303489},{"_id":"themes/next/source/assets/RunContainerFlow.png","hash":"283cceb805d1a57e9a31f30300888247095dd6cd","modified":1531913303642},{"_id":"themes/next/source/assets/aerospike0.png","hash":"afb2fc02e4e49167c712474fdc14b96eee8cce34","modified":1531913303391},{"_id":"themes/next/source/assets/avatar.jpg","hash":"738c4fd688e66a0ce9a93016c3afc64531430298","modified":1531913787341},{"_id":"themes/next/source/assets/kafka-consumer-structure.png","hash":"b183b80eec38e11f36e5a88f2431337eaa0a0d7b","modified":1531913303629},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/assets/CONCISE.png","hash":"860b8a3bf91c96e29cd098ac502169ce5f14583a","modified":1531913303462},{"_id":"themes/next/source/assets/RoaringBitmap_basic.png","hash":"59cc4ed18aa1e27321eca461c111816fc54bea8d","modified":1531913303638},{"_id":"themes/next/source/assets/WAH.png","hash":"dc9c67591717beaa169247c21ca9a347d525fd9b","modified":1531913303651},{"_id":"themes/next/source/assets/flink-2.png","hash":"cdbe3c84c3324a4e8a031dc281572a19c91f5fb3","modified":1531913303596},{"_id":"themes/next/source/assets/flink-3.png","hash":"3c39eef3586f4b798a5a2d1d4fc83eb137de2073","modified":1531913303616},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/.git/objects/2f/5e44529ff7a7c47a96207279843abbc976125c","hash":"e7cd6850622a4c8f0b32dc653a5a84b218054687","modified":1531910598271},{"_id":"source/.git/objects/35/044940135fec45fe1595758c4c4ba57856441f","hash":"9f1c30a90b8833e3829accc118e08cc3dd558a35","modified":1531910598125},{"_id":"source/.git/objects/42/afa3996054ebcf133c1ad747324f7004b68e04","hash":"89f093d50eca954e5d4bdd0521239f6a292c353b","modified":1531910598136},{"_id":"source/.git/objects/5e/11b7331f2b2faba86d08b8a04cfea9105f339d","hash":"a90934d12a4bbcbf44ae017f116b14f0bbc20ffe","modified":1531910598095},{"_id":"source/.git/objects/84/9d3424ca93f8aa7b935658445b7c25c53b229c","hash":"5789bad2b8f23ea429ee5b3905247b41c2eec6f3","modified":1531910598090},{"_id":"source/.git/objects/88/09b9ea44e365cf7926405853429672328ed0e6","hash":"707ad14f2ee8f52e9f389e9e0f279c46409b0a6e","modified":1531910598270},{"_id":"source/.git/objects/99/52b3274b6af0f96f210deaad5c2c3bdd73f552","hash":"a7805a823bda50d4d1b04eed263a0c4a32671768","modified":1531910598138},{"_id":"source/.git/objects/ad/8e4431bf59d93870492339ede0f7ca576b3348","hash":"98d52ca261acdfe389ba48730542a843f7bce7c1","modified":1531910598124},{"_id":"source/.git/objects/c9/5f6d2680c5705b1845bc0cd4b6f3dc32fde0a1","hash":"a878bb16dbc10a43ce23d6cc54b31ae1c8dbe6a9","modified":1531910598268},{"_id":"source/.git/objects/e3/81f2339dda30a962713694dd90406d6ca97685","hash":"23ee8ccd34822dd3b4f739537bd3863689f16432","modified":1531910598269},{"_id":"source/.git/objects/e4/464dd6033f3818ef8c00297e5d7b9963f4d969","hash":"cd68effe8386594109ef6ac36397c58efee853a1","modified":1531910598141},{"_id":"source/.git/refs/heads/master","hash":"5a0aa7965aae0a5906fe7ca43fcf03a8b2f27f63","modified":1531910598081},{"_id":"source/images/DASHENG-900x700-1.png","hash":"8f275ab03560b758667ea8fbe2a32683d39840de","modified":1531910598313},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/source/assets/flink-1.png","hash":"bdb72516eaffac892a720aa794175268683c3c1d","modified":1531913303555},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"source/images/DASHENG-900x700-2.png","hash":"a483686830d76d8c820c3a6f83ad6efaccbc48c1","modified":1531910598294},{"_id":"source/images/DASHENG-900x700-4.png","hash":"84179d4eb90ec12b2498bdd0f08982e86d5b1511","modified":1531910598332},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"source/.git/logs/refs/heads/master","hash":"b7b2418691a1e09ca149dd3e316fab9a9b8ef8bb","modified":1531910598084},{"_id":"source/.git/refs/remotes/origin/master","hash":"5a0aa7965aae0a5906fe7ca43fcf03a8b2f27f63","modified":1531910598080},{"_id":"source/images/DASHENG-900x700-3.png","hash":"c7da56072a60e52e3e8f2a8407859f47f69e0055","modified":1531910598354},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"source/.git/logs/refs/remotes/origin/master","hash":"297f5f9429703779e7c794cc82af60f508c9d8f3","modified":1531910598083},{"_id":"source/.git/objects/06/6b6eca35a6dc2fedaae1651404914ebcca4df5","hash":"033524714034c611a6a7f5075b5b48ac609b481b","modified":1531910598266},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"source/.git/objects/13/61a07ff02e584bff5d3626d8ffec6ef59185d3","hash":"bce4891b598fffccdd356a7e03516caee6eb744e","modified":1531910598203},{"_id":"source/.git/objects/d7/2d12f6210b96330a881f4d46c37ace748d307d","hash":"9c917f9ddcaa72828e861768bff478aeb494b45f","modified":1531910598135},{"_id":"source/.git/objects/9c/616b6f08b3810b89341d5ed01e889177548ed1","hash":"d3ca0ddb83c18619d302149b72b58b01ff6cc685","modified":1531910598122},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"public/hexo-admin-ehc-images.json","hash":"0d165d7223eabfe5ebab834a5d89c8cb9731b5ff","modified":1531914418941},{"_id":"public/about/index.html","hash":"4cb4e7d12e2bad35b9a90a2122c862d1e9db843c","modified":1531914419019},{"_id":"public/tags/index.html","hash":"6e036948f85a79ce36a4faa0ef921b9abff6a21f","modified":1531914419019},{"_id":"public/archives/index.html","hash":"76f72d92574e87c2435c03c6e2f4fef38010b1e8","modified":1531914419019},{"_id":"public/archives/2018/index.html","hash":"3d5bf3b901a5ca256590dae8b4637a929e61dcac","modified":1531914419019},{"_id":"public/archives/2018/03/index.html","hash":"a46a8e9e4b5a6fba8595e63813347b41be1552c4","modified":1531914419019},{"_id":"public/archives/2018/04/index.html","hash":"614851f459056efc3dda36973c9395684583d8b3","modified":1531914419019},{"_id":"public/archives/2018/06/index.html","hash":"7233ba4b070d4ccd04ce6e326a85d0831c09d507","modified":1531914419020},{"_id":"public/archives/2018/07/index.html","hash":"a62f87ee727e2a2aff21200cf0f1e3470c12ac38","modified":1531914419020},{"_id":"public/categories/aerospike/index.html","hash":"08c531c5d87ebfa8e0b210f52b1aac6d3925576c","modified":1531914419020},{"_id":"public/categories/bitmap/index.html","hash":"9b02e378b81bfb2c06f37aa7e655c8fdd8d948c2","modified":1531914419020},{"_id":"public/tags/Aerospike/index.html","hash":"8cd1b52b22436f28f8780104f405ef37f62841f0","modified":1531914419020},{"_id":"public/tags/Bitmap/index.html","hash":"3bce949bf69ba9902a9b44ed312b2367b9c2f0b8","modified":1531914419020},{"_id":"public/tags/flink/index.html","hash":"873b469ab697b6ae0fccff471c535d5b7303efe1","modified":1531914419020},{"_id":"public/tags/exactly-once/index.html","hash":"5018f2c5b9ffeb3315e3c491d12969f9371e1582","modified":1531914419020},{"_id":"public/tags/memory/index.html","hash":"a2dd9ebffefd6da4491299efebbeaacc15af0596","modified":1531914419021},{"_id":"public/tags/linux/index.html","hash":"5402fcf448e356c8779adff66a072429e23e67a2","modified":1531914419021},{"_id":"public/2018/07/06/bitmap/index.html","hash":"ed1c9efe6c0600817657ae8d1c82cf64663be876","modified":1531914419021},{"_id":"public/2018/06/03/aerospike-write/index.html","hash":"71e7c1fde841e9d56808d7e0532ab0607b8d6126","modified":1531914419021},{"_id":"public/2018/04/11/hs-err-pid-log/index.html","hash":"b288d8c9fa79b50c616c420a4d0172b44d30b5d5","modified":1531914419021},{"_id":"public/2018/03/20/flink-exactly-once/index.html","hash":"50de29c1b27aaf927ce202c885568f591bfa9ce5","modified":1531914419021},{"_id":"public/2018/03/20/aerospike/index.html","hash":"67a671fa0e0ef9a76166033686b13780759eaf96","modified":1531914419021},{"_id":"public/index.html","hash":"78b3863aa1a203bc18a1f1316255d43cc7bcbc0c","modified":1531914419022},{"_id":"public/assets/EWAH.png","hash":"b6a2167ac71bed7903787d687fca0c06aa423c4b","modified":1531914419056},{"_id":"public/assets/RunContainerFlow.png","hash":"283cceb805d1a57e9a31f30300888247095dd6cd","modified":1531914419056},{"_id":"public/assets/aerospike0.png","hash":"afb2fc02e4e49167c712474fdc14b96eee8cce34","modified":1531914419056},{"_id":"public/assets/avatar.jpg","hash":"738c4fd688e66a0ce9a93016c3afc64531430298","modified":1531914419056},{"_id":"public/assets/kafka-consumer-structure.png","hash":"b183b80eec38e11f36e5a88f2431337eaa0a0d7b","modified":1531914419056},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1531914419057},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1531914419057},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531914419057},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1531914419057},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1531914419057},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1531914419057},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1531914419057},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1531914419058},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1531914419058},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1531914419058},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1531914419058},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1531914419058},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531914419058},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1531914419058},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531914419058},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1531914419059},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1531914419059},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531914419059},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1531914419059},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1531914419059},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531914419059},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531914419059},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531914419060},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531914419060},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531914419060},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531914419060},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1531914419060},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1531914419060},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1531914419060},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1531914419061},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1531914419061},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1531914419061},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531914419061},{"_id":"public/assets/CONCISE.png","hash":"860b8a3bf91c96e29cd098ac502169ce5f14583a","modified":1531914420545},{"_id":"public/assets/RoaringBitmap_basic.png","hash":"59cc4ed18aa1e27321eca461c111816fc54bea8d","modified":1531914420552},{"_id":"public/assets/WAH.png","hash":"dc9c67591717beaa169247c21ca9a347d525fd9b","modified":1531914420577},{"_id":"public/assets/flink-2.png","hash":"cdbe3c84c3324a4e8a031dc281572a19c91f5fb3","modified":1531914420578},{"_id":"public/assets/flink-3.png","hash":"3c39eef3586f4b798a5a2d1d4fc83eb137de2073","modified":1531914420578},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531914420578},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531914420578},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1531914420606},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1531914420606},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1531914420606},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1531914420606},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1531914420606},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1531914420606},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1531914420606},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1531914420606},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1531914420607},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1531914420607},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1531914420607},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1531914420607},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1531914420607},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1531914420607},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1531914420607},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1531914420608},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1531914420608},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1531914420608},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1531914420608},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1531914420608},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1531914420608},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1531914420608},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1531914420609},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1531914420610},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1531914420610},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1531914420610},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1531914420610},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1531914420610},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1531914420610},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1531914420610},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1531914420611},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1531914420611},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1531914420611},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1531914420611},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531914420611},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1531914420611},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1531914420611},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531914420611},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1531914420612},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1531914420612},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531914420612},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1531914420612},{"_id":"public/css/main.css","hash":"9501fc920fb79e4d00fc106053e7eed76b04f90f","modified":1531914420612},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1531914420612},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1531914420612},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1531914420613},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1531914420613},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1531914420613},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1531914420613},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1531914420613},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531914420613},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1531914420613},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1531914420614},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1531914420614},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1531914420614},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1531914420614},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1531914420615},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1531914420615},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1531914420617},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1531914420618},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1531914420618},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1531914420618},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1531914420618},{"_id":"public/assets/flink-1.png","hash":"bdb72516eaffac892a720aa794175268683c3c1d","modified":1531914420618},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1531914420619},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531914420619},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1531914420619},{"_id":"public/images/DASHENG-900x700-1.png","hash":"8f275ab03560b758667ea8fbe2a32683d39840de","modified":1531914420658},{"_id":"public/images/DASHENG-900x700-2.png","hash":"a483686830d76d8c820c3a6f83ad6efaccbc48c1","modified":1531914420674},{"_id":"public/images/DASHENG-900x700-4.png","hash":"84179d4eb90ec12b2498bdd0f08982e86d5b1511","modified":1531914420675},{"_id":"public/images/DASHENG-900x700-3.png","hash":"c7da56072a60e52e3e8f2a8407859f47f69e0055","modified":1531914420693},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1531914420693}],"Category":[{"name":"aerospike","_id":"cjjr2ad8c0005rgugrjyis39i"},{"name":"bitmap","_id":"cjjr2ad96000argugte6s7vwr"}],"Data":[],"Page":[{"_content":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","source":"hexo-admin-ehc-images.json","raw":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","date":"2018-07-18T10:43:18.019Z","updated":"2018-07-18T10:43:18.019Z","path":"hexo-admin-ehc-images.json","layout":"false","title":"","comments":1,"_id":"cjjr2acsr0000rgugoq16k54h","content":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","site":{"data":{}},"excerpt":"","more":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]"},{"title":"About","tags":"About","articleId":"about","date":"2018-03-18T17:26:57.000Z","_content":"### 廖嘉逸\n**北邮人**  \n**菜鸡一枚**  \n**欢迎交流**\n\n*Feel free to contact me :)*    \n*By Email: buptliaojiayi@gmail.com*\n","source":"about/index.md","raw":"title: About\ntags: About\narticleId: about\ndate: 2018-03-19 01:26:57\n---\n### 廖嘉逸\n**北邮人**  \n**菜鸡一枚**  \n**欢迎交流**\n\n*Feel free to contact me :)*    \n*By Email: buptliaojiayi@gmail.com*\n","updated":"2018-07-18T10:43:18.025Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjjr2ad7q0002rgugdk5qiin2","content":"<h3 id=\"廖嘉逸\"><a href=\"#廖嘉逸\" class=\"headerlink\" title=\"廖嘉逸\"></a>廖嘉逸</h3><p><strong>北邮人</strong><br><strong>菜鸡一枚</strong><br><strong>欢迎交流</strong></p>\n<p><em>Feel free to contact me :)</em><br><em>By Email: <a href=\"mailto:buptliaojiayi@gmail.com\" target=\"_blank\" rel=\"noopener\">buptliaojiayi@gmail.com</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"廖嘉逸\"><a href=\"#廖嘉逸\" class=\"headerlink\" title=\"廖嘉逸\"></a>廖嘉逸</h3><p><strong>北邮人</strong><br><strong>菜鸡一枚</strong><br><strong>欢迎交流</strong></p>\n<p><em>Feel free to contact me :)</em><br><em>By Email: <a href=\"mailto:buptliaojiayi@gmail.com\" target=\"_blank\" rel=\"noopener\">buptliaojiayi@gmail.com</a></em></p>\n"},{"title":"tags","date":"2018-03-18T17:25:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-19 01:25:46\ntype: \"tags\"\n---\n","updated":"2018-07-18T10:43:18.016Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjr2ad7z0004rgugu5is3fc7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Aerospike笔记（二）- 写机制","author":"Liao Jiayi","date":"2018-06-03T07:21:29.000Z","articleId":"aerospike2","_content":"最近使用Aerospike遇到了不少的问题，在不断地看日志，读源码，阅读[Aerospike社区](https://discuss.aerospike.com/t/device-overload-when-map-size-is-too-big/5206)的各种文章之后，也算是对Aerospike有了一些更深的了解。\n\n#### Storage Layout\n![Storage Layout][1]\nSSD namespace的写流程基本如上图所示，现在，让我们假设有一个写操作***MapOperation.PUT***正在进行，它的路径将会是这样：  \n1. 根据**MapOperation.PUT**的各种参数和策略，来校验Metadata，例如namespace、set是否存在，然后写入到最小写单元block5中。  \n2. block的默认大小为1024bytes，只有当block为full或者没有数据继续写入时才会触发block添加到写队列Write Queue。  \n3. 独立的worker线程会将Write Queue中的数据持久化到SSD中。  \n4. 数据写入后，如果memory或者storage存储到达了hwm(high-watermark-memory)，将会触发evict操作，即为了清理空间，把一些未来将要过期的数据提前过期，具体原理在[ttl及eviction机制](https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737)。  \n5. 在block中的部分数据被删除后，block的usage level将会从100%下降到低于defrag-lwm-pct（默认是50%），此时会触发defrag，将会有block放入write queue中被重写。  \n\n***\n#### Potential Risk\n在这样的写机制下，不难发现在一些细节上，会有潜在的问题。具体的调优方式可以参照[Aerospike参数列表](https://www.aerospike.com/docs/reference/configuration#write-block-size)。\n* Record被写入block时，会出现record size >  write-block-size的情况，此时异常退出，可以通过write-block-size在namespace级别做调整，write-block-size过大，容易出现usage-level过低频繁defrag，过小会增加和SSD的flush次数。\n* Block在写入到write-queue中时，可能会出现queue大小超过最大限制的情况，异常为 \"write fail: queue too deep: exceeds max %i\"，queue长度可以通过max-write-cache调节， queue length = max-write-cache / write-block-size。\n* 为了能够高效读取数据，Record中的数据都是必须是在连续的内存空间中被写入的，这意味着UPDATE/DELETE/PUT等操作，都要将整条Record重新写入，所以不建议存储需要频繁更新的big record，否则对性能会产生很大的影响，且容易触发queue too deep的限制。\n* 频繁地UPDATE/DELETE/PUT操作会导致block usage level下降，从而产生defrag，而defrag会影响正常数据写入的效率，可以通过降低defrag的low-water-mark来减少defrag的次数，参数为defrag-lwm-pct。\n* 刚刚提到evict操作会将数据提前过期，这个可以通过high-water-memory-pct和high-water-dist-pct来调整evict的策略。\n\n***\n#### Log Inspection\nLog是最容易看出问题的方式，但是as的Log有些表达显得略有晦涩，采取了不少缩写的表达，目前来看，log level调整为 info 已经能够帮助定位大部分问题，这里挑取一些关键信息做一下记录。\n```\n{test} /dev/xvdc: used-bytes 3695468032 free-wblocks 34690 write-q 0 write (445674,0.0) defrag-q 0 defrag-read (39134,0.0) defrag-write (5427,0.0)\n```\n这是as定时output出的某个节点的基本情况，针对namespace test，在/dev/xvdc的SSD上，已经使用了3695468032 bytes的磁盘空间，当前可以使用的free-wblocks有34690个，write-queue长度为0，写入了445674个(包括defrag)blocks，当前写入速率为0.0，defrag-queue长度为0，加入到defrag队列中的有 39134个blocks，当前速率为0.0，真正产生defrag的block数为5427，当前速率为0.0。\n```\n{test} breached eviction hwm (memory), memory sz:1792174976 (1792174976 + 0) hwm:1288490188, disk sz:3695922432 hwm:20128464896\nno records below eviction void-time 266233878 - threshold bucket 4678, width 113 sec, count 298 > target 11 (0.5 pct)\n```\n这条log和[as的evict机制](https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737)有关，这里是表示当前size已经超过了hwm，触发了eviction，但是由于count 298 > target 11（bucket是最小的evict单位，此时找到了最大可以evict的个数为11个，但是最近的bucket中有298个，所以无法触发）。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1]: http://liaojiayi.com/assets/aerospike0.png\n","source":"_posts/aerospike-write.md","raw":"title: Aerospike笔记（二）- 写机制\nauthor: Liao Jiayi\ndate: 2018-06-03 15:21:29\ntags:\n  - Aerospike\narticleId: aerospike2\ncategories: [aerospike]\n---\n最近使用Aerospike遇到了不少的问题，在不断地看日志，读源码，阅读[Aerospike社区](https://discuss.aerospike.com/t/device-overload-when-map-size-is-too-big/5206)的各种文章之后，也算是对Aerospike有了一些更深的了解。\n\n#### Storage Layout\n![Storage Layout][1]\nSSD namespace的写流程基本如上图所示，现在，让我们假设有一个写操作***MapOperation.PUT***正在进行，它的路径将会是这样：  \n1. 根据**MapOperation.PUT**的各种参数和策略，来校验Metadata，例如namespace、set是否存在，然后写入到最小写单元block5中。  \n2. block的默认大小为1024bytes，只有当block为full或者没有数据继续写入时才会触发block添加到写队列Write Queue。  \n3. 独立的worker线程会将Write Queue中的数据持久化到SSD中。  \n4. 数据写入后，如果memory或者storage存储到达了hwm(high-watermark-memory)，将会触发evict操作，即为了清理空间，把一些未来将要过期的数据提前过期，具体原理在[ttl及eviction机制](https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737)。  \n5. 在block中的部分数据被删除后，block的usage level将会从100%下降到低于defrag-lwm-pct（默认是50%），此时会触发defrag，将会有block放入write queue中被重写。  \n\n***\n#### Potential Risk\n在这样的写机制下，不难发现在一些细节上，会有潜在的问题。具体的调优方式可以参照[Aerospike参数列表](https://www.aerospike.com/docs/reference/configuration#write-block-size)。\n* Record被写入block时，会出现record size >  write-block-size的情况，此时异常退出，可以通过write-block-size在namespace级别做调整，write-block-size过大，容易出现usage-level过低频繁defrag，过小会增加和SSD的flush次数。\n* Block在写入到write-queue中时，可能会出现queue大小超过最大限制的情况，异常为 \"write fail: queue too deep: exceeds max %i\"，queue长度可以通过max-write-cache调节， queue length = max-write-cache / write-block-size。\n* 为了能够高效读取数据，Record中的数据都是必须是在连续的内存空间中被写入的，这意味着UPDATE/DELETE/PUT等操作，都要将整条Record重新写入，所以不建议存储需要频繁更新的big record，否则对性能会产生很大的影响，且容易触发queue too deep的限制。\n* 频繁地UPDATE/DELETE/PUT操作会导致block usage level下降，从而产生defrag，而defrag会影响正常数据写入的效率，可以通过降低defrag的low-water-mark来减少defrag的次数，参数为defrag-lwm-pct。\n* 刚刚提到evict操作会将数据提前过期，这个可以通过high-water-memory-pct和high-water-dist-pct来调整evict的策略。\n\n***\n#### Log Inspection\nLog是最容易看出问题的方式，但是as的Log有些表达显得略有晦涩，采取了不少缩写的表达，目前来看，log level调整为 info 已经能够帮助定位大部分问题，这里挑取一些关键信息做一下记录。\n```\n{test} /dev/xvdc: used-bytes 3695468032 free-wblocks 34690 write-q 0 write (445674,0.0) defrag-q 0 defrag-read (39134,0.0) defrag-write (5427,0.0)\n```\n这是as定时output出的某个节点的基本情况，针对namespace test，在/dev/xvdc的SSD上，已经使用了3695468032 bytes的磁盘空间，当前可以使用的free-wblocks有34690个，write-queue长度为0，写入了445674个(包括defrag)blocks，当前写入速率为0.0，defrag-queue长度为0，加入到defrag队列中的有 39134个blocks，当前速率为0.0，真正产生defrag的block数为5427，当前速率为0.0。\n```\n{test} breached eviction hwm (memory), memory sz:1792174976 (1792174976 + 0) hwm:1288490188, disk sz:3695922432 hwm:20128464896\nno records below eviction void-time 266233878 - threshold bucket 4678, width 113 sec, count 298 > target 11 (0.5 pct)\n```\n这条log和[as的evict机制](https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737)有关，这里是表示当前size已经超过了hwm，触发了eviction，但是由于count 298 > target 11（bucket是最小的evict单位，此时找到了最大可以evict的个数为11个，但是最近的bucket中有298个，所以无法触发）。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1]: http://liaojiayi.com/assets/aerospike0.png\n","slug":"aerospike-write","published":1,"updated":"2018-07-18T10:43:18.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjr2ad7d0001rgug6kkzifui","content":"<p>最近使用Aerospike遇到了不少的问题，在不断地看日志，读源码，阅读<a href=\"https://discuss.aerospike.com/t/device-overload-when-map-size-is-too-big/5206\" target=\"_blank\" rel=\"noopener\">Aerospike社区</a>的各种文章之后，也算是对Aerospike有了一些更深的了解。</p>\n<h4 id=\"Storage-Layout\"><a href=\"#Storage-Layout\" class=\"headerlink\" title=\"Storage Layout\"></a>Storage Layout</h4><p><img src=\"http://liaojiayi.com/assets/aerospike0.png\" alt=\"Storage Layout\"><br>SSD namespace的写流程基本如上图所示，现在，让我们假设有一个写操作<strong><em>MapOperation.PUT</em></strong>正在进行，它的路径将会是这样：  </p>\n<ol>\n<li>根据<strong>MapOperation.PUT</strong>的各种参数和策略，来校验Metadata，例如namespace、set是否存在，然后写入到最小写单元block5中。  </li>\n<li>block的默认大小为1024bytes，只有当block为full或者没有数据继续写入时才会触发block添加到写队列Write Queue。  </li>\n<li>独立的worker线程会将Write Queue中的数据持久化到SSD中。  </li>\n<li>数据写入后，如果memory或者storage存储到达了hwm(high-watermark-memory)，将会触发evict操作，即为了清理空间，把一些未来将要过期的数据提前过期，具体原理在<a href=\"https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737\" target=\"_blank\" rel=\"noopener\">ttl及eviction机制</a>。  </li>\n<li>在block中的部分数据被删除后，block的usage level将会从100%下降到低于defrag-lwm-pct（默认是50%），此时会触发defrag，将会有block放入write queue中被重写。  </li>\n</ol>\n<hr>\n<h4 id=\"Potential-Risk\"><a href=\"#Potential-Risk\" class=\"headerlink\" title=\"Potential Risk\"></a>Potential Risk</h4><p>在这样的写机制下，不难发现在一些细节上，会有潜在的问题。具体的调优方式可以参照<a href=\"https://www.aerospike.com/docs/reference/configuration#write-block-size\" target=\"_blank\" rel=\"noopener\">Aerospike参数列表</a>。</p>\n<ul>\n<li>Record被写入block时，会出现record size &gt;  write-block-size的情况，此时异常退出，可以通过write-block-size在namespace级别做调整，write-block-size过大，容易出现usage-level过低频繁defrag，过小会增加和SSD的flush次数。</li>\n<li>Block在写入到write-queue中时，可能会出现queue大小超过最大限制的情况，异常为 “write fail: queue too deep: exceeds max %i”，queue长度可以通过max-write-cache调节， queue length = max-write-cache / write-block-size。</li>\n<li>为了能够高效读取数据，Record中的数据都是必须是在连续的内存空间中被写入的，这意味着UPDATE/DELETE/PUT等操作，都要将整条Record重新写入，所以不建议存储需要频繁更新的big record，否则对性能会产生很大的影响，且容易触发queue too deep的限制。</li>\n<li>频繁地UPDATE/DELETE/PUT操作会导致block usage level下降，从而产生defrag，而defrag会影响正常数据写入的效率，可以通过降低defrag的low-water-mark来减少defrag的次数，参数为defrag-lwm-pct。</li>\n<li>刚刚提到evict操作会将数据提前过期，这个可以通过high-water-memory-pct和high-water-dist-pct来调整evict的策略。</li>\n</ul>\n<hr>\n<h4 id=\"Log-Inspection\"><a href=\"#Log-Inspection\" class=\"headerlink\" title=\"Log Inspection\"></a>Log Inspection</h4><p>Log是最容易看出问题的方式，但是as的Log有些表达显得略有晦涩，采取了不少缩写的表达，目前来看，log level调整为 info 已经能够帮助定位大部分问题，这里挑取一些关键信息做一下记录。<br><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;test&#125; <span class=\"regexp\">/dev/</span>xvdc: used-bytes <span class=\"number\">3695468032</span> free-wblocks <span class=\"number\">34690</span> <span class=\"keyword\">write</span>-q <span class=\"number\">0</span> <span class=\"keyword\">write</span> (<span class=\"number\">445674</span>,<span class=\"number\">0.0</span>) defrag-q <span class=\"number\">0</span> defrag-<span class=\"keyword\">read</span> (<span class=\"number\">39134</span>,<span class=\"number\">0.0</span>) defrag-<span class=\"keyword\">write</span> (<span class=\"number\">5427</span>,<span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这是as定时output出的某个节点的基本情况，针对namespace test，在/dev/xvdc的SSD上，已经使用了3695468032 bytes的磁盘空间，当前可以使用的free-wblocks有34690个，write-queue长度为0，写入了445674个(包括defrag)blocks，当前写入速率为0.0，defrag-queue长度为0，加入到defrag队列中的有 39134个blocks，当前速率为0.0，真正产生defrag的block数为5427，当前速率为0.0。<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"selector-tag\">test</span>&#125; <span class=\"selector-tag\">breached</span> <span class=\"selector-tag\">eviction</span> <span class=\"selector-tag\">hwm</span> (memory), <span class=\"selector-tag\">memory</span> <span class=\"selector-tag\">sz</span><span class=\"selector-pseudo\">:1792174976</span> (<span class=\"number\">1792174976</span> + <span class=\"number\">0</span>) <span class=\"selector-tag\">hwm</span><span class=\"selector-pseudo\">:1288490188</span>, <span class=\"selector-tag\">disk</span> <span class=\"selector-tag\">sz</span><span class=\"selector-pseudo\">:3695922432</span> <span class=\"selector-tag\">hwm</span><span class=\"selector-pseudo\">:20128464896</span></span><br><span class=\"line\"><span class=\"selector-tag\">no</span> <span class=\"selector-tag\">records</span> <span class=\"selector-tag\">below</span> <span class=\"selector-tag\">eviction</span> <span class=\"selector-tag\">void-time</span> <span class=\"selector-tag\">266233878</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">threshold</span> <span class=\"selector-tag\">bucket</span> <span class=\"selector-tag\">4678</span>, <span class=\"selector-tag\">width</span> <span class=\"selector-tag\">113</span> <span class=\"selector-tag\">sec</span>, <span class=\"selector-tag\">count</span> <span class=\"selector-tag\">298</span> &gt; <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">11</span> (<span class=\"number\">0.5</span> pct)</span><br></pre></td></tr></table></figure></p>\n<p>这条log和<a href=\"https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737\" target=\"_blank\" rel=\"noopener\">as的evict机制</a>有关，这里是表示当前size已经超过了hwm，触发了eviction，但是由于count 298 &gt; target 11（bucket是最小的evict单位，此时找到了最大可以evict的个数为11个，但是最近的bucket中有298个，所以无法触发）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近使用Aerospike遇到了不少的问题，在不断地看日志，读源码，阅读<a href=\"https://discuss.aerospike.com/t/device-overload-when-map-size-is-too-big/5206\" target=\"_blank\" rel=\"noopener\">Aerospike社区</a>的各种文章之后，也算是对Aerospike有了一些更深的了解。</p>\n<h4 id=\"Storage-Layout\"><a href=\"#Storage-Layout\" class=\"headerlink\" title=\"Storage Layout\"></a>Storage Layout</h4><p><img src=\"http://liaojiayi.com/assets/aerospike0.png\" alt=\"Storage Layout\"><br>SSD namespace的写流程基本如上图所示，现在，让我们假设有一个写操作<strong><em>MapOperation.PUT</em></strong>正在进行，它的路径将会是这样：  </p>\n<ol>\n<li>根据<strong>MapOperation.PUT</strong>的各种参数和策略，来校验Metadata，例如namespace、set是否存在，然后写入到最小写单元block5中。  </li>\n<li>block的默认大小为1024bytes，只有当block为full或者没有数据继续写入时才会触发block添加到写队列Write Queue。  </li>\n<li>独立的worker线程会将Write Queue中的数据持久化到SSD中。  </li>\n<li>数据写入后，如果memory或者storage存储到达了hwm(high-watermark-memory)，将会触发evict操作，即为了清理空间，把一些未来将要过期的数据提前过期，具体原理在<a href=\"https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737\" target=\"_blank\" rel=\"noopener\">ttl及eviction机制</a>。  </li>\n<li>在block中的部分数据被删除后，block的usage level将会从100%下降到低于defrag-lwm-pct（默认是50%），此时会触发defrag，将会有block放入write queue中被重写。  </li>\n</ol>\n<hr>\n<h4 id=\"Potential-Risk\"><a href=\"#Potential-Risk\" class=\"headerlink\" title=\"Potential Risk\"></a>Potential Risk</h4><p>在这样的写机制下，不难发现在一些细节上，会有潜在的问题。具体的调优方式可以参照<a href=\"https://www.aerospike.com/docs/reference/configuration#write-block-size\" target=\"_blank\" rel=\"noopener\">Aerospike参数列表</a>。</p>\n<ul>\n<li>Record被写入block时，会出现record size &gt;  write-block-size的情况，此时异常退出，可以通过write-block-size在namespace级别做调整，write-block-size过大，容易出现usage-level过低频繁defrag，过小会增加和SSD的flush次数。</li>\n<li>Block在写入到write-queue中时，可能会出现queue大小超过最大限制的情况，异常为 “write fail: queue too deep: exceeds max %i”，queue长度可以通过max-write-cache调节， queue length = max-write-cache / write-block-size。</li>\n<li>为了能够高效读取数据，Record中的数据都是必须是在连续的内存空间中被写入的，这意味着UPDATE/DELETE/PUT等操作，都要将整条Record重新写入，所以不建议存储需要频繁更新的big record，否则对性能会产生很大的影响，且容易触发queue too deep的限制。</li>\n<li>频繁地UPDATE/DELETE/PUT操作会导致block usage level下降，从而产生defrag，而defrag会影响正常数据写入的效率，可以通过降低defrag的low-water-mark来减少defrag的次数，参数为defrag-lwm-pct。</li>\n<li>刚刚提到evict操作会将数据提前过期，这个可以通过high-water-memory-pct和high-water-dist-pct来调整evict的策略。</li>\n</ul>\n<hr>\n<h4 id=\"Log-Inspection\"><a href=\"#Log-Inspection\" class=\"headerlink\" title=\"Log Inspection\"></a>Log Inspection</h4><p>Log是最容易看出问题的方式，但是as的Log有些表达显得略有晦涩，采取了不少缩写的表达，目前来看，log level调整为 info 已经能够帮助定位大部分问题，这里挑取一些关键信息做一下记录。<br><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;test&#125; <span class=\"regexp\">/dev/</span>xvdc: used-bytes <span class=\"number\">3695468032</span> free-wblocks <span class=\"number\">34690</span> <span class=\"keyword\">write</span>-q <span class=\"number\">0</span> <span class=\"keyword\">write</span> (<span class=\"number\">445674</span>,<span class=\"number\">0.0</span>) defrag-q <span class=\"number\">0</span> defrag-<span class=\"keyword\">read</span> (<span class=\"number\">39134</span>,<span class=\"number\">0.0</span>) defrag-<span class=\"keyword\">write</span> (<span class=\"number\">5427</span>,<span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这是as定时output出的某个节点的基本情况，针对namespace test，在/dev/xvdc的SSD上，已经使用了3695468032 bytes的磁盘空间，当前可以使用的free-wblocks有34690个，write-queue长度为0，写入了445674个(包括defrag)blocks，当前写入速率为0.0，defrag-queue长度为0，加入到defrag队列中的有 39134个blocks，当前速率为0.0，真正产生defrag的block数为5427，当前速率为0.0。<br><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"selector-tag\">test</span>&#125; <span class=\"selector-tag\">breached</span> <span class=\"selector-tag\">eviction</span> <span class=\"selector-tag\">hwm</span> (memory), <span class=\"selector-tag\">memory</span> <span class=\"selector-tag\">sz</span><span class=\"selector-pseudo\">:1792174976</span> (<span class=\"number\">1792174976</span> + <span class=\"number\">0</span>) <span class=\"selector-tag\">hwm</span><span class=\"selector-pseudo\">:1288490188</span>, <span class=\"selector-tag\">disk</span> <span class=\"selector-tag\">sz</span><span class=\"selector-pseudo\">:3695922432</span> <span class=\"selector-tag\">hwm</span><span class=\"selector-pseudo\">:20128464896</span></span><br><span class=\"line\"><span class=\"selector-tag\">no</span> <span class=\"selector-tag\">records</span> <span class=\"selector-tag\">below</span> <span class=\"selector-tag\">eviction</span> <span class=\"selector-tag\">void-time</span> <span class=\"selector-tag\">266233878</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">threshold</span> <span class=\"selector-tag\">bucket</span> <span class=\"selector-tag\">4678</span>, <span class=\"selector-tag\">width</span> <span class=\"selector-tag\">113</span> <span class=\"selector-tag\">sec</span>, <span class=\"selector-tag\">count</span> <span class=\"selector-tag\">298</span> &gt; <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">11</span> (<span class=\"number\">0.5</span> pct)</span><br></pre></td></tr></table></figure></p>\n<p>这条log和<a href=\"https://discuss.aerospike.com/t/records-ttl-and-evictions-for-aerospike-server-version-prior-to-3-8/737\" target=\"_blank\" rel=\"noopener\">as的evict机制</a>有关，这里是表示当前size已经超过了hwm，触发了eviction，但是由于count 298 &gt; target 11（bucket是最小的evict单位，此时找到了最大可以evict的个数为11个，但是最近的bucket中有298个，所以无法触发）。</p>\n"},{"title":"Aerospike学习笔记","articleId":"aerospike","date":"2018-03-19T17:01:00.000Z","_content":"\n### 应用场景\n在很多业务场景比如反欺诈、广告定向推荐、数字身份验证等，这些场景都有一些共同的特点： \n   \n* 读多于写    \n* 随机读   \n* 延迟低   \n\n数据量不大时，有很多优秀的框架可以使用，比如单机的redis、Cassandra等，它们不但满足上述需求而且还有着易于运维、管理方便的优点，但随着业务规模扩大，不可预测的大流量、查询延时低效都成为了比较难解决的痛点。     \nAerospike在2012年作为分布式KV数据库出现后，以稳定性和延迟低的特点让不少公司开始试水，到如今4.0版本发布，6年时间里Aerospike已经积累了不少在不同行业的成功案例。\n\n***\n\n### 数据模型\n我理解在Aerospike的Data model其实和Hbase中的namespace/table/row/column family非常类似。   \n \n* **namespace**\n    - namespace是最高层级的一个容器概念，决定了这个容器中的数据的存储方式，有着如下的配置    \n    - 如何存储，可以选择全部存储到DRAM或者SSD上\n    - replica复制因子，决定了这个namespace的高可用性\n    - expire TTL\n* **sets**\n    - sets是可选项，数据存储时可以指定set也可以不指定，在set中可以设置基于set的二级索引\n* **records**\n    - record就是一行记录了，包括:\n        * key\n        * metadata(版本号(version), ttl, last-update-time(lut))\n        * bins\n* **bins**\n    - 包括name和value（类似列名和值）\n\n***\n### 查询索引\nAerospike中的查询索引分为两种，一级索引和二级索引，两种索引的用途各不相同。\n\n* **一级索引（Primary-Index）**\n    - Primary-Index是Aerospike默认存在的，作用是加速查询和防止数据倾斜，[具体原理](https://www.aerospike.com/docs/architecture/primary-index.html)是取每一个key做hash后，前12bit作为partitionID，所以partition的个数是固定的，4096个。\n* **二级索引（Secondary-Index）**\n    - Secondary-Index和关系型数据库中的索引类似，基于bin而存在，但其索引后的值是当前节点的partitionId列表，也就是说，即使命中了二级索引，还是要scan相应partition list中的每一行记录，效率并不高。需要注意的是，在生成Secondary-Index的过程，Aerospike需要扫描所有的数据，所以要在low load的时候做这样的操作。\n\n***\n### 一致性和高可用分析\n我们假设在单namespace的情况下，当前Aerospike集群为4个节点，每个节点有1024个partition，replica复制因子为1，探讨常见的以下[几种场景](https://www.aerospike.com/docs/architecture/consistency.html)：\n\n1. 在一个节点宕机的情况下，其replica的节点从replica变成了master，并开始寻找新的replica节点，数据不会发生丢失。\n2. 在两个节点宕机的情况下，如果两个节点正好是partition的replica和master，数据丢失，可靠性无法保证。\n3. 在一个节点宕机后重启时，由于在内存中的index丢失，需要重新scan整个SSD来重建索引（非常耗时），整个集群开始重新rebalance，相应partition的数据从其他节点复制到新节点中，直到新节点ready之后再加入集群，数据不会丢失。\n\n***\n### 选型建议\nKV数据库有很多，但大多数都是在Speed和Scale上来做取舍，根据别人的一些选型经验，总结出了其他几个存储和Aerospike对比的一些劣势。\n\n* MongoDB、Redis这种需要内存的代价过高，无法做到低成本地快速Scale，且无法应对高峰流量。\n* Couchbase性能很好，但是不支持udf。\n* Cassandra在大数据量下无法保证低延迟。\n\n***\n### 不足之处\n虽然Aerospike有稳定性好、延迟低、性价比高的特点，但是也有一些不足的地方需要注意的：\n\n* Aerospike Rolling Start时间过长（scan整个SSD重建索引）\n* 无法支持复杂的数据类型，例如hyperloglog\n* 每个record不能超过1MB\n* 在做rebalance过程中，响应会有所抖动\n","source":"_posts/aerospike.md","raw":"title: Aerospike学习笔记\ntags:\n  - Aerospike\narticleId: aerospike\ncategories: []\ndate: 2018-03-20 01:01:00\n---\n\n### 应用场景\n在很多业务场景比如反欺诈、广告定向推荐、数字身份验证等，这些场景都有一些共同的特点： \n   \n* 读多于写    \n* 随机读   \n* 延迟低   \n\n数据量不大时，有很多优秀的框架可以使用，比如单机的redis、Cassandra等，它们不但满足上述需求而且还有着易于运维、管理方便的优点，但随着业务规模扩大，不可预测的大流量、查询延时低效都成为了比较难解决的痛点。     \nAerospike在2012年作为分布式KV数据库出现后，以稳定性和延迟低的特点让不少公司开始试水，到如今4.0版本发布，6年时间里Aerospike已经积累了不少在不同行业的成功案例。\n\n***\n\n### 数据模型\n我理解在Aerospike的Data model其实和Hbase中的namespace/table/row/column family非常类似。   \n \n* **namespace**\n    - namespace是最高层级的一个容器概念，决定了这个容器中的数据的存储方式，有着如下的配置    \n    - 如何存储，可以选择全部存储到DRAM或者SSD上\n    - replica复制因子，决定了这个namespace的高可用性\n    - expire TTL\n* **sets**\n    - sets是可选项，数据存储时可以指定set也可以不指定，在set中可以设置基于set的二级索引\n* **records**\n    - record就是一行记录了，包括:\n        * key\n        * metadata(版本号(version), ttl, last-update-time(lut))\n        * bins\n* **bins**\n    - 包括name和value（类似列名和值）\n\n***\n### 查询索引\nAerospike中的查询索引分为两种，一级索引和二级索引，两种索引的用途各不相同。\n\n* **一级索引（Primary-Index）**\n    - Primary-Index是Aerospike默认存在的，作用是加速查询和防止数据倾斜，[具体原理](https://www.aerospike.com/docs/architecture/primary-index.html)是取每一个key做hash后，前12bit作为partitionID，所以partition的个数是固定的，4096个。\n* **二级索引（Secondary-Index）**\n    - Secondary-Index和关系型数据库中的索引类似，基于bin而存在，但其索引后的值是当前节点的partitionId列表，也就是说，即使命中了二级索引，还是要scan相应partition list中的每一行记录，效率并不高。需要注意的是，在生成Secondary-Index的过程，Aerospike需要扫描所有的数据，所以要在low load的时候做这样的操作。\n\n***\n### 一致性和高可用分析\n我们假设在单namespace的情况下，当前Aerospike集群为4个节点，每个节点有1024个partition，replica复制因子为1，探讨常见的以下[几种场景](https://www.aerospike.com/docs/architecture/consistency.html)：\n\n1. 在一个节点宕机的情况下，其replica的节点从replica变成了master，并开始寻找新的replica节点，数据不会发生丢失。\n2. 在两个节点宕机的情况下，如果两个节点正好是partition的replica和master，数据丢失，可靠性无法保证。\n3. 在一个节点宕机后重启时，由于在内存中的index丢失，需要重新scan整个SSD来重建索引（非常耗时），整个集群开始重新rebalance，相应partition的数据从其他节点复制到新节点中，直到新节点ready之后再加入集群，数据不会丢失。\n\n***\n### 选型建议\nKV数据库有很多，但大多数都是在Speed和Scale上来做取舍，根据别人的一些选型经验，总结出了其他几个存储和Aerospike对比的一些劣势。\n\n* MongoDB、Redis这种需要内存的代价过高，无法做到低成本地快速Scale，且无法应对高峰流量。\n* Couchbase性能很好，但是不支持udf。\n* Cassandra在大数据量下无法保证低延迟。\n\n***\n### 不足之处\n虽然Aerospike有稳定性好、延迟低、性价比高的特点，但是也有一些不足的地方需要注意的：\n\n* Aerospike Rolling Start时间过长（scan整个SSD重建索引）\n* 无法支持复杂的数据类型，例如hyperloglog\n* 每个record不能超过1MB\n* 在做rebalance过程中，响应会有所抖动\n","slug":"aerospike","published":1,"updated":"2018-07-18T10:43:18.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjr2ad7u0003rgugmtxk3v2u","content":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>在很多业务场景比如反欺诈、广告定向推荐、数字身份验证等，这些场景都有一些共同的特点： </p>\n<ul>\n<li>读多于写    </li>\n<li>随机读   </li>\n<li>延迟低   </li>\n</ul>\n<p>数据量不大时，有很多优秀的框架可以使用，比如单机的redis、Cassandra等，它们不但满足上述需求而且还有着易于运维、管理方便的优点，但随着业务规模扩大，不可预测的大流量、查询延时低效都成为了比较难解决的痛点。<br>Aerospike在2012年作为分布式KV数据库出现后，以稳定性和延迟低的特点让不少公司开始试水，到如今4.0版本发布，6年时间里Aerospike已经积累了不少在不同行业的成功案例。</p>\n<hr>\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p>我理解在Aerospike的Data model其实和Hbase中的namespace/table/row/column family非常类似。   </p>\n<ul>\n<li><strong>namespace</strong><ul>\n<li>namespace是最高层级的一个容器概念，决定了这个容器中的数据的存储方式，有着如下的配置    </li>\n<li>如何存储，可以选择全部存储到DRAM或者SSD上</li>\n<li>replica复制因子，决定了这个namespace的高可用性</li>\n<li>expire TTL</li>\n</ul>\n</li>\n<li><strong>sets</strong><ul>\n<li>sets是可选项，数据存储时可以指定set也可以不指定，在set中可以设置基于set的二级索引</li>\n</ul>\n</li>\n<li><strong>records</strong><ul>\n<li>record就是一行记录了，包括:<ul>\n<li>key</li>\n<li>metadata(版本号(version), ttl, last-update-time(lut))</li>\n<li>bins</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>bins</strong><ul>\n<li>包括name和value（类似列名和值）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"查询索引\"><a href=\"#查询索引\" class=\"headerlink\" title=\"查询索引\"></a>查询索引</h3><p>Aerospike中的查询索引分为两种，一级索引和二级索引，两种索引的用途各不相同。</p>\n<ul>\n<li><strong>一级索引（Primary-Index）</strong><ul>\n<li>Primary-Index是Aerospike默认存在的，作用是加速查询和防止数据倾斜，<a href=\"https://www.aerospike.com/docs/architecture/primary-index.html\" target=\"_blank\" rel=\"noopener\">具体原理</a>是取每一个key做hash后，前12bit作为partitionID，所以partition的个数是固定的，4096个。</li>\n</ul>\n</li>\n<li><strong>二级索引（Secondary-Index）</strong><ul>\n<li>Secondary-Index和关系型数据库中的索引类似，基于bin而存在，但其索引后的值是当前节点的partitionId列表，也就是说，即使命中了二级索引，还是要scan相应partition list中的每一行记录，效率并不高。需要注意的是，在生成Secondary-Index的过程，Aerospike需要扫描所有的数据，所以要在low load的时候做这样的操作。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"一致性和高可用分析\"><a href=\"#一致性和高可用分析\" class=\"headerlink\" title=\"一致性和高可用分析\"></a>一致性和高可用分析</h3><p>我们假设在单namespace的情况下，当前Aerospike集群为4个节点，每个节点有1024个partition，replica复制因子为1，探讨常见的以下<a href=\"https://www.aerospike.com/docs/architecture/consistency.html\" target=\"_blank\" rel=\"noopener\">几种场景</a>：</p>\n<ol>\n<li>在一个节点宕机的情况下，其replica的节点从replica变成了master，并开始寻找新的replica节点，数据不会发生丢失。</li>\n<li>在两个节点宕机的情况下，如果两个节点正好是partition的replica和master，数据丢失，可靠性无法保证。</li>\n<li>在一个节点宕机后重启时，由于在内存中的index丢失，需要重新scan整个SSD来重建索引（非常耗时），整个集群开始重新rebalance，相应partition的数据从其他节点复制到新节点中，直到新节点ready之后再加入集群，数据不会丢失。</li>\n</ol>\n<hr>\n<h3 id=\"选型建议\"><a href=\"#选型建议\" class=\"headerlink\" title=\"选型建议\"></a>选型建议</h3><p>KV数据库有很多，但大多数都是在Speed和Scale上来做取舍，根据别人的一些选型经验，总结出了其他几个存储和Aerospike对比的一些劣势。</p>\n<ul>\n<li>MongoDB、Redis这种需要内存的代价过高，无法做到低成本地快速Scale，且无法应对高峰流量。</li>\n<li>Couchbase性能很好，但是不支持udf。</li>\n<li>Cassandra在大数据量下无法保证低延迟。</li>\n</ul>\n<hr>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><p>虽然Aerospike有稳定性好、延迟低、性价比高的特点，但是也有一些不足的地方需要注意的：</p>\n<ul>\n<li>Aerospike Rolling Start时间过长（scan整个SSD重建索引）</li>\n<li>无法支持复杂的数据类型，例如hyperloglog</li>\n<li>每个record不能超过1MB</li>\n<li>在做rebalance过程中，响应会有所抖动</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>在很多业务场景比如反欺诈、广告定向推荐、数字身份验证等，这些场景都有一些共同的特点： </p>\n<ul>\n<li>读多于写    </li>\n<li>随机读   </li>\n<li>延迟低   </li>\n</ul>\n<p>数据量不大时，有很多优秀的框架可以使用，比如单机的redis、Cassandra等，它们不但满足上述需求而且还有着易于运维、管理方便的优点，但随着业务规模扩大，不可预测的大流量、查询延时低效都成为了比较难解决的痛点。<br>Aerospike在2012年作为分布式KV数据库出现后，以稳定性和延迟低的特点让不少公司开始试水，到如今4.0版本发布，6年时间里Aerospike已经积累了不少在不同行业的成功案例。</p>\n<hr>\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p>我理解在Aerospike的Data model其实和Hbase中的namespace/table/row/column family非常类似。   </p>\n<ul>\n<li><strong>namespace</strong><ul>\n<li>namespace是最高层级的一个容器概念，决定了这个容器中的数据的存储方式，有着如下的配置    </li>\n<li>如何存储，可以选择全部存储到DRAM或者SSD上</li>\n<li>replica复制因子，决定了这个namespace的高可用性</li>\n<li>expire TTL</li>\n</ul>\n</li>\n<li><strong>sets</strong><ul>\n<li>sets是可选项，数据存储时可以指定set也可以不指定，在set中可以设置基于set的二级索引</li>\n</ul>\n</li>\n<li><strong>records</strong><ul>\n<li>record就是一行记录了，包括:<ul>\n<li>key</li>\n<li>metadata(版本号(version), ttl, last-update-time(lut))</li>\n<li>bins</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>bins</strong><ul>\n<li>包括name和value（类似列名和值）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"查询索引\"><a href=\"#查询索引\" class=\"headerlink\" title=\"查询索引\"></a>查询索引</h3><p>Aerospike中的查询索引分为两种，一级索引和二级索引，两种索引的用途各不相同。</p>\n<ul>\n<li><strong>一级索引（Primary-Index）</strong><ul>\n<li>Primary-Index是Aerospike默认存在的，作用是加速查询和防止数据倾斜，<a href=\"https://www.aerospike.com/docs/architecture/primary-index.html\" target=\"_blank\" rel=\"noopener\">具体原理</a>是取每一个key做hash后，前12bit作为partitionID，所以partition的个数是固定的，4096个。</li>\n</ul>\n</li>\n<li><strong>二级索引（Secondary-Index）</strong><ul>\n<li>Secondary-Index和关系型数据库中的索引类似，基于bin而存在，但其索引后的值是当前节点的partitionId列表，也就是说，即使命中了二级索引，还是要scan相应partition list中的每一行记录，效率并不高。需要注意的是，在生成Secondary-Index的过程，Aerospike需要扫描所有的数据，所以要在low load的时候做这样的操作。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"一致性和高可用分析\"><a href=\"#一致性和高可用分析\" class=\"headerlink\" title=\"一致性和高可用分析\"></a>一致性和高可用分析</h3><p>我们假设在单namespace的情况下，当前Aerospike集群为4个节点，每个节点有1024个partition，replica复制因子为1，探讨常见的以下<a href=\"https://www.aerospike.com/docs/architecture/consistency.html\" target=\"_blank\" rel=\"noopener\">几种场景</a>：</p>\n<ol>\n<li>在一个节点宕机的情况下，其replica的节点从replica变成了master，并开始寻找新的replica节点，数据不会发生丢失。</li>\n<li>在两个节点宕机的情况下，如果两个节点正好是partition的replica和master，数据丢失，可靠性无法保证。</li>\n<li>在一个节点宕机后重启时，由于在内存中的index丢失，需要重新scan整个SSD来重建索引（非常耗时），整个集群开始重新rebalance，相应partition的数据从其他节点复制到新节点中，直到新节点ready之后再加入集群，数据不会丢失。</li>\n</ol>\n<hr>\n<h3 id=\"选型建议\"><a href=\"#选型建议\" class=\"headerlink\" title=\"选型建议\"></a>选型建议</h3><p>KV数据库有很多，但大多数都是在Speed和Scale上来做取舍，根据别人的一些选型经验，总结出了其他几个存储和Aerospike对比的一些劣势。</p>\n<ul>\n<li>MongoDB、Redis这种需要内存的代价过高，无法做到低成本地快速Scale，且无法应对高峰流量。</li>\n<li>Couchbase性能很好，但是不支持udf。</li>\n<li>Cassandra在大数据量下无法保证低延迟。</li>\n</ul>\n<hr>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><p>虽然Aerospike有稳定性好、延迟低、性价比高的特点，但是也有一些不足的地方需要注意的：</p>\n<ul>\n<li>Aerospike Rolling Start时间过长（scan整个SSD重建索引）</li>\n<li>无法支持复杂的数据类型，例如hyperloglog</li>\n<li>每个record不能超过1MB</li>\n<li>在做rebalance过程中，响应会有所抖动</li>\n</ul>\n"},{"title":"Bitmap的小研究","author":"Liao Jiayi","articleId":"bitmap","date":"2018-07-06T08:46:00.000Z","_content":"**Paper原文地址**：[An Experimental Study of Bitmap Compression vs.\nInverted List Compression](http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf)  \nBitmap可以说是一个很万能的存储了，无论是空间消耗，还是查询响应，在最佳实践下，都可以达到很好的效果。最近做了不少Bitmap的研究，简单的基于上面的Paper去做一个记录。\n***\n## History\n从最原始的Bitmap到RoaringBitmap（可能是目前大多数场景的最佳选择？），虽然仔细研究Roaring的原理并不复杂，但也是经过了十几年的变化和迭代。  \n#### WAH(Word Aligned Hybrid)\n这个算法只压缩全0或者全1的group。将所有bits按照连续的31bit进行分组，然后对每一组进行编码，编码后的长度为32bit。具体结构如下图所示：\n![WAH][1]\n#### EWAH(Enhanced Word Aligned Hybrid)\n基于WAH加了一个Header，作为元信息的存储。我理解这其实并没有在存储上做到太多帮助的优化，反而是在查询或者插入中，会更加便捷。Header结构如下所示。\n![EWAH][2]\n#### CONCISE(Compressed N Composble Integer Set)\n这也是基于WAH做的一个优化。在WAH算法中，只要有一个bit被置1，那么整个group都无法被压缩，这一算法在这种odd bit上做了优化。记录了这个单一odd bit的位置。\n![CONCISE][3]\n#### VALWAH(Variable-Aligned Length WAH)\n基于参数的优化，缓解了WAH的每个group固定32bit的限制（因为32bit最多能表示2^31 - 1个压缩group，但是实际上不会那么多）。采用了参数去调控，没有固定的规则，对于不同的bitmap自动采用不同的参数，很影响查询的效率。\n#### Roaring\n以65535bit分bucket，每个bucket里的integer共享高16bit（为bucket的编号），例如第一个bucket为[0 ~ 65535]，高16bit为0，第二个bucket为[65536 ~ 65536*2 - 1]，高16bit为1。其中，65536中以short integer(16bit)为单位表示integer的低16bit。所以当这个bucket中integer 个数 > 4096时，不存在压缩。\n***\n## RoaringBitmap源码解读\nRoaringBitmap的基本构成如下:HighLowContainer中存储了每个Integer的高16bit的公共索引keys以及具体存储数字的Container。由于Container是最终的载体，所以优化基本都在Container里。下面直接分析源码中的Add方法，通过这个方法基本上可以看出Container的内部结构。 \n![RoaringBasic][4]\n先看一个代码里比较常出现的binarySearch方法，这里比较灵活的一点是，如果找到则返回对应的index，如果没找到则返回对应位置的负数，这样既可以传递位置信息，又可以传递是否存在的信息。\n```\nprotected static int hybridUnsignedBinarySearch(final short[] array, final int begin,\n      final int end, final short k) {\n    int ikey = toIntUnsigned(k);\n    // next line accelerates the possibly common case where the value would\n    // be inserted at the end\n    if ((end > 0) && (toIntUnsigned(array[end - 1]) < ikey)) {\n      return -end - 1;\n    }\n    int low = begin;\n    int high = end - 1;\n    // 32 in the next line matches the size of a cache line\n    while (low + 32 <= high) {\n      final int middleIndex = (low + high) >>> 1;\n      final int middleValue = toIntUnsigned(array[middleIndex]);\n\n      if (middleValue < ikey) {\n        low = middleIndex + 1;\n      } else if (middleValue > ikey) {\n        high = middleIndex - 1;\n      } else {\n        return middleIndex;\n      }\n    }\n    // we finish the job with a sequential search\n    int x = low;\n    for (; x <= high; ++x) {\n      final int val = toIntUnsigned(array[x]);\n      if (val >= ikey) {\n        if (val == ikey) {\n          return x;\n        }\n        break;\n      }\n    }\n    return -(x + 1);\n}\n```\n\n#### ArrayContainer\n```\nshort[] content;\n\n@Override\npublic Container add(final short x) {\n    int loc = Util.unsignedBinarySearch(content, 0, cardinality, x);\n    if (loc < 0) {\n      // Transform the ArrayContainer to a BitmapContainer\n      // when cardinality = DEFAULT_MAX_SIZE\n      if (cardinality >= DEFAULT_MAX_SIZE) {\n        BitmapContainer a = this.toBitmapContainer();\n        a.add(x);\n        return a;\n      }\n      if (cardinality >= this.content.length) {\n        increaseCapacity();\n      }\n      // insertion : shift the elements > x by one position to\n      // the right\n      // and put x in it's appropriate place\n      System.arraycopy(content, -loc - 1, content, -loc, cardinality + loc + 1);\n      content[-loc - 1] = x;\n      ++cardinality;\n    }\n    return this;\n}\n```\n相关变量说明：\n* content: 为了增删改查的方便性，采用short有序数组来存储数字(注意高16bit已经存储在HighLowContainer中，所以这里只需要存储低16bit的short就满足了)。\n* DEFAULT_MAX_SIZE: 由于有序数组在插入时需要做二分查找，效率较低，所以这里有一个限定4096，超过这个大小自动转成BitmapContainer。\n\n**add**流程如下：\n\n1. 通过二分查找找到x所在的content中的位置，若存在则不处理，不存在则进入下一步。\n2. 对cardinality进行判断，决定是否需要升级Container或者扩容。\n3. 将content中loc之后的子数组后移一位，将数据插入，形成新的content数组。\n\n#### BitmapContainer\n\n```\nfinal long[] bitmap;\n\n@Override\npublic Container add(final short i) {\n    final int x = Util.toIntUnsigned(i);\n    final long previous = bitmap[x / 64];\n    long newval = previous | (1L << x);\n    bitmap[x / 64] = newval;\n    if (USE_BRANCHLESS) {\n      cardinality += (previous ^ newval) >>> x;\n    } else if (previous != newval) {\n      ++cardinality;\n    }\n    return this;\n}\n```\n相关变量说明：\n\n* bitmap: 1个Container中可以存储65536(2^16bit)个数字Integer，在BitmapContainer中再以long(2^6bit)做分组，形成了long数组。\n\n**add**流程如下:\n\n1. 通过x/64找到bitmap中的long数组中的位置得到原值previous。\n2. previous | (1L << x) 得到newval。\n3. 改变cardinality。\n可以发现当Integer分布稠密时，容易在一个long中出现连续1的情况，在这种情况下也存在优化空间，可以调用runOptimize升级为RunContainer。\n\n#### RunContainer\n主要解决了连续1的情况，例如15、16、17、18可以被优化成15,3。RunContainer中有两个关键变量，valueslength的2n位是具体数值，例如15，2n+1为连续Integer的个数，例如3；nbrruns为valueslength/2被优化的次数。\n\n```\nprivate short[] valueslength;\nint nbrruns = 0;\n\n```\n\nadd方法如下所示:\n\n```\n@Override\npublic Container add(short k) {\n    // TODO: it might be better and simpler to do return\n    // toBitmapOrArrayContainer(getCardinality()).add(k)\n    // but note that some unit tests use this method to build up test runcontainers without calling\n    // runOptimize\n    int index = unsignedInterleavedBinarySearch(valueslength, 0, nbrruns, k);\n    if (index >= 0) {\n      return this;// already there\n    }\n    index = -index - 2;// points to preceding value, possibly -1\n    if (index >= 0)   {// possible match\n      int offset = toIntUnsigned(k) - toIntUnsigned(getValue(index));\n      int le = toIntUnsigned(getLength(index));\n      if (offset <= le) {\n        return this;\n      }\n      if (offset == le + 1) {\n        // we may need to fuse\n        if (index + 1 < nbrruns) {\n          if (toIntUnsigned(getValue(index + 1)) == toIntUnsigned(k) + 1) {\n            // indeed fusion is needed\n            setLength(index,\n                (short) (getValue(index + 1) + getLength(index + 1) - getValue(index)));\n            recoverRoomAtIndex(index + 1);\n            return this;\n          }\n        }\n        incrementLength(index);\n        return this;\n      }\n      if (index + 1 < nbrruns) {\n        // we may need to fuse\n        if (toIntUnsigned(getValue(index + 1)) == toIntUnsigned(k) + 1) {\n          // indeed fusion is needed\n          setValue(index + 1, k);\n          setLength(index + 1, (short) (getLength(index + 1) + 1));\n          return this;\n        }\n      }\n    }\n    if (index == -1) {\n      // we may need to extend the first run\n      if (0 < nbrruns) {\n        if (getValue(0) == k + 1) {\n          incrementLength(0);\n          decrementValue(0);\n          return this;\n        }\n      }\n    }\n    makeRoomAtIndex(index + 1);\n    setValue(index + 1, k);\n    setLength(index + 1, (short) 0);\n    return this;\n}\n```\n\n这里的决策方法略为复杂，用流程图来表示应该会比较直观。\n![FLOW][5]\nContainer之间比较如下：\n\nContainer | 空间利用率 | 查询效率 \n- | :-: | -: \nArrayContainer | 无压缩、低 | 使用二分查找，低\nBitmapContainer | 无压缩、低 | 直接利用索引命中，高\nRunContainer | 有压缩、高 | 顺序查找，中\n\n[1]: http://liaojiayi.com/assets/WAH.png\n[2]: http://liaojiayi.com/assets/EWAH.png\n[3]: http://liaojiayi.com/assets/CONCISE.png\n[4]: http://liaojiayi.com/assets/RoaringBitmap_basic.png\n[5]: http://liaojiayi.com/assets/RunContainerFlow.png","source":"_posts/bitmap.md","raw":"title: Bitmap的小研究\nauthor: Liao Jiayi\ntags:\n  - Bitmap\narticleId: bitmap\ncategories:\n  - bitmap\ndate: 2018-07-06 16:46:00\n---\n**Paper原文地址**：[An Experimental Study of Bitmap Compression vs.\nInverted List Compression](http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf)  \nBitmap可以说是一个很万能的存储了，无论是空间消耗，还是查询响应，在最佳实践下，都可以达到很好的效果。最近做了不少Bitmap的研究，简单的基于上面的Paper去做一个记录。\n***\n## History\n从最原始的Bitmap到RoaringBitmap（可能是目前大多数场景的最佳选择？），虽然仔细研究Roaring的原理并不复杂，但也是经过了十几年的变化和迭代。  \n#### WAH(Word Aligned Hybrid)\n这个算法只压缩全0或者全1的group。将所有bits按照连续的31bit进行分组，然后对每一组进行编码，编码后的长度为32bit。具体结构如下图所示：\n![WAH][1]\n#### EWAH(Enhanced Word Aligned Hybrid)\n基于WAH加了一个Header，作为元信息的存储。我理解这其实并没有在存储上做到太多帮助的优化，反而是在查询或者插入中，会更加便捷。Header结构如下所示。\n![EWAH][2]\n#### CONCISE(Compressed N Composble Integer Set)\n这也是基于WAH做的一个优化。在WAH算法中，只要有一个bit被置1，那么整个group都无法被压缩，这一算法在这种odd bit上做了优化。记录了这个单一odd bit的位置。\n![CONCISE][3]\n#### VALWAH(Variable-Aligned Length WAH)\n基于参数的优化，缓解了WAH的每个group固定32bit的限制（因为32bit最多能表示2^31 - 1个压缩group，但是实际上不会那么多）。采用了参数去调控，没有固定的规则，对于不同的bitmap自动采用不同的参数，很影响查询的效率。\n#### Roaring\n以65535bit分bucket，每个bucket里的integer共享高16bit（为bucket的编号），例如第一个bucket为[0 ~ 65535]，高16bit为0，第二个bucket为[65536 ~ 65536*2 - 1]，高16bit为1。其中，65536中以short integer(16bit)为单位表示integer的低16bit。所以当这个bucket中integer 个数 > 4096时，不存在压缩。\n***\n## RoaringBitmap源码解读\nRoaringBitmap的基本构成如下:HighLowContainer中存储了每个Integer的高16bit的公共索引keys以及具体存储数字的Container。由于Container是最终的载体，所以优化基本都在Container里。下面直接分析源码中的Add方法，通过这个方法基本上可以看出Container的内部结构。 \n![RoaringBasic][4]\n先看一个代码里比较常出现的binarySearch方法，这里比较灵活的一点是，如果找到则返回对应的index，如果没找到则返回对应位置的负数，这样既可以传递位置信息，又可以传递是否存在的信息。\n```\nprotected static int hybridUnsignedBinarySearch(final short[] array, final int begin,\n      final int end, final short k) {\n    int ikey = toIntUnsigned(k);\n    // next line accelerates the possibly common case where the value would\n    // be inserted at the end\n    if ((end > 0) && (toIntUnsigned(array[end - 1]) < ikey)) {\n      return -end - 1;\n    }\n    int low = begin;\n    int high = end - 1;\n    // 32 in the next line matches the size of a cache line\n    while (low + 32 <= high) {\n      final int middleIndex = (low + high) >>> 1;\n      final int middleValue = toIntUnsigned(array[middleIndex]);\n\n      if (middleValue < ikey) {\n        low = middleIndex + 1;\n      } else if (middleValue > ikey) {\n        high = middleIndex - 1;\n      } else {\n        return middleIndex;\n      }\n    }\n    // we finish the job with a sequential search\n    int x = low;\n    for (; x <= high; ++x) {\n      final int val = toIntUnsigned(array[x]);\n      if (val >= ikey) {\n        if (val == ikey) {\n          return x;\n        }\n        break;\n      }\n    }\n    return -(x + 1);\n}\n```\n\n#### ArrayContainer\n```\nshort[] content;\n\n@Override\npublic Container add(final short x) {\n    int loc = Util.unsignedBinarySearch(content, 0, cardinality, x);\n    if (loc < 0) {\n      // Transform the ArrayContainer to a BitmapContainer\n      // when cardinality = DEFAULT_MAX_SIZE\n      if (cardinality >= DEFAULT_MAX_SIZE) {\n        BitmapContainer a = this.toBitmapContainer();\n        a.add(x);\n        return a;\n      }\n      if (cardinality >= this.content.length) {\n        increaseCapacity();\n      }\n      // insertion : shift the elements > x by one position to\n      // the right\n      // and put x in it's appropriate place\n      System.arraycopy(content, -loc - 1, content, -loc, cardinality + loc + 1);\n      content[-loc - 1] = x;\n      ++cardinality;\n    }\n    return this;\n}\n```\n相关变量说明：\n* content: 为了增删改查的方便性，采用short有序数组来存储数字(注意高16bit已经存储在HighLowContainer中，所以这里只需要存储低16bit的short就满足了)。\n* DEFAULT_MAX_SIZE: 由于有序数组在插入时需要做二分查找，效率较低，所以这里有一个限定4096，超过这个大小自动转成BitmapContainer。\n\n**add**流程如下：\n\n1. 通过二分查找找到x所在的content中的位置，若存在则不处理，不存在则进入下一步。\n2. 对cardinality进行判断，决定是否需要升级Container或者扩容。\n3. 将content中loc之后的子数组后移一位，将数据插入，形成新的content数组。\n\n#### BitmapContainer\n\n```\nfinal long[] bitmap;\n\n@Override\npublic Container add(final short i) {\n    final int x = Util.toIntUnsigned(i);\n    final long previous = bitmap[x / 64];\n    long newval = previous | (1L << x);\n    bitmap[x / 64] = newval;\n    if (USE_BRANCHLESS) {\n      cardinality += (previous ^ newval) >>> x;\n    } else if (previous != newval) {\n      ++cardinality;\n    }\n    return this;\n}\n```\n相关变量说明：\n\n* bitmap: 1个Container中可以存储65536(2^16bit)个数字Integer，在BitmapContainer中再以long(2^6bit)做分组，形成了long数组。\n\n**add**流程如下:\n\n1. 通过x/64找到bitmap中的long数组中的位置得到原值previous。\n2. previous | (1L << x) 得到newval。\n3. 改变cardinality。\n可以发现当Integer分布稠密时，容易在一个long中出现连续1的情况，在这种情况下也存在优化空间，可以调用runOptimize升级为RunContainer。\n\n#### RunContainer\n主要解决了连续1的情况，例如15、16、17、18可以被优化成15,3。RunContainer中有两个关键变量，valueslength的2n位是具体数值，例如15，2n+1为连续Integer的个数，例如3；nbrruns为valueslength/2被优化的次数。\n\n```\nprivate short[] valueslength;\nint nbrruns = 0;\n\n```\n\nadd方法如下所示:\n\n```\n@Override\npublic Container add(short k) {\n    // TODO: it might be better and simpler to do return\n    // toBitmapOrArrayContainer(getCardinality()).add(k)\n    // but note that some unit tests use this method to build up test runcontainers without calling\n    // runOptimize\n    int index = unsignedInterleavedBinarySearch(valueslength, 0, nbrruns, k);\n    if (index >= 0) {\n      return this;// already there\n    }\n    index = -index - 2;// points to preceding value, possibly -1\n    if (index >= 0)   {// possible match\n      int offset = toIntUnsigned(k) - toIntUnsigned(getValue(index));\n      int le = toIntUnsigned(getLength(index));\n      if (offset <= le) {\n        return this;\n      }\n      if (offset == le + 1) {\n        // we may need to fuse\n        if (index + 1 < nbrruns) {\n          if (toIntUnsigned(getValue(index + 1)) == toIntUnsigned(k) + 1) {\n            // indeed fusion is needed\n            setLength(index,\n                (short) (getValue(index + 1) + getLength(index + 1) - getValue(index)));\n            recoverRoomAtIndex(index + 1);\n            return this;\n          }\n        }\n        incrementLength(index);\n        return this;\n      }\n      if (index + 1 < nbrruns) {\n        // we may need to fuse\n        if (toIntUnsigned(getValue(index + 1)) == toIntUnsigned(k) + 1) {\n          // indeed fusion is needed\n          setValue(index + 1, k);\n          setLength(index + 1, (short) (getLength(index + 1) + 1));\n          return this;\n        }\n      }\n    }\n    if (index == -1) {\n      // we may need to extend the first run\n      if (0 < nbrruns) {\n        if (getValue(0) == k + 1) {\n          incrementLength(0);\n          decrementValue(0);\n          return this;\n        }\n      }\n    }\n    makeRoomAtIndex(index + 1);\n    setValue(index + 1, k);\n    setLength(index + 1, (short) 0);\n    return this;\n}\n```\n\n这里的决策方法略为复杂，用流程图来表示应该会比较直观。\n![FLOW][5]\nContainer之间比较如下：\n\nContainer | 空间利用率 | 查询效率 \n- | :-: | -: \nArrayContainer | 无压缩、低 | 使用二分查找，低\nBitmapContainer | 无压缩、低 | 直接利用索引命中，高\nRunContainer | 有压缩、高 | 顺序查找，中\n\n[1]: http://liaojiayi.com/assets/WAH.png\n[2]: http://liaojiayi.com/assets/EWAH.png\n[3]: http://liaojiayi.com/assets/CONCISE.png\n[4]: http://liaojiayi.com/assets/RoaringBitmap_basic.png\n[5]: http://liaojiayi.com/assets/RunContainerFlow.png","slug":"bitmap","published":1,"updated":"2018-07-18T10:43:18.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjr2ad8m0007rgugj72s0en3","content":"<p><strong>Paper原文地址</strong>：<a href=\"http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf\" target=\"_blank\" rel=\"noopener\">An Experimental Study of Bitmap Compression vs.<br>Inverted List Compression</a><br>Bitmap可以说是一个很万能的存储了，无论是空间消耗，还是查询响应，在最佳实践下，都可以达到很好的效果。最近做了不少Bitmap的研究，简单的基于上面的Paper去做一个记录。</p>\n<hr>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>从最原始的Bitmap到RoaringBitmap（可能是目前大多数场景的最佳选择？），虽然仔细研究Roaring的原理并不复杂，但也是经过了十几年的变化和迭代。  </p>\n<h4 id=\"WAH-Word-Aligned-Hybrid\"><a href=\"#WAH-Word-Aligned-Hybrid\" class=\"headerlink\" title=\"WAH(Word Aligned Hybrid)\"></a>WAH(Word Aligned Hybrid)</h4><p>这个算法只压缩全0或者全1的group。将所有bits按照连续的31bit进行分组，然后对每一组进行编码，编码后的长度为32bit。具体结构如下图所示：<br><img src=\"http://liaojiayi.com/assets/WAH.png\" alt=\"WAH\"></p>\n<h4 id=\"EWAH-Enhanced-Word-Aligned-Hybrid\"><a href=\"#EWAH-Enhanced-Word-Aligned-Hybrid\" class=\"headerlink\" title=\"EWAH(Enhanced Word Aligned Hybrid)\"></a>EWAH(Enhanced Word Aligned Hybrid)</h4><p>基于WAH加了一个Header，作为元信息的存储。我理解这其实并没有在存储上做到太多帮助的优化，反而是在查询或者插入中，会更加便捷。Header结构如下所示。<br><img src=\"http://liaojiayi.com/assets/EWAH.png\" alt=\"EWAH\"></p>\n<h4 id=\"CONCISE-Compressed-N-Composble-Integer-Set\"><a href=\"#CONCISE-Compressed-N-Composble-Integer-Set\" class=\"headerlink\" title=\"CONCISE(Compressed N Composble Integer Set)\"></a>CONCISE(Compressed N Composble Integer Set)</h4><p>这也是基于WAH做的一个优化。在WAH算法中，只要有一个bit被置1，那么整个group都无法被压缩，这一算法在这种odd bit上做了优化。记录了这个单一odd bit的位置。<br><img src=\"http://liaojiayi.com/assets/CONCISE.png\" alt=\"CONCISE\"></p>\n<h4 id=\"VALWAH-Variable-Aligned-Length-WAH\"><a href=\"#VALWAH-Variable-Aligned-Length-WAH\" class=\"headerlink\" title=\"VALWAH(Variable-Aligned Length WAH)\"></a>VALWAH(Variable-Aligned Length WAH)</h4><p>基于参数的优化，缓解了WAH的每个group固定32bit的限制（因为32bit最多能表示2^31 - 1个压缩group，但是实际上不会那么多）。采用了参数去调控，没有固定的规则，对于不同的bitmap自动采用不同的参数，很影响查询的效率。</p>\n<h4 id=\"Roaring\"><a href=\"#Roaring\" class=\"headerlink\" title=\"Roaring\"></a>Roaring</h4><p>以65535bit分bucket，每个bucket里的integer共享高16bit（为bucket的编号），例如第一个bucket为[0 ~ 65535]，高16bit为0，第二个bucket为[65536 ~ 65536*2 - 1]，高16bit为1。其中，65536中以short integer(16bit)为单位表示integer的低16bit。所以当这个bucket中integer 个数 &gt; 4096时，不存在压缩。</p>\n<hr>\n<h2 id=\"RoaringBitmap源码解读\"><a href=\"#RoaringBitmap源码解读\" class=\"headerlink\" title=\"RoaringBitmap源码解读\"></a>RoaringBitmap源码解读</h2><p>RoaringBitmap的基本构成如下:HighLowContainer中存储了每个Integer的高16bit的公共索引keys以及具体存储数字的Container。由于Container是最终的载体，所以优化基本都在Container里。下面直接分析源码中的Add方法，通过这个方法基本上可以看出Container的内部结构。<br><img src=\"http://liaojiayi.com/assets/RoaringBitmap_basic.png\" alt=\"RoaringBasic\"><br>先看一个代码里比较常出现的binarySearch方法，这里比较灵活的一点是，如果找到则返回对应的index，如果没找到则返回对应位置的负数，这样既可以传递位置信息，又可以传递是否存在的信息。<br><figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> hybridUnsignedBinarySearch(<span class=\"keyword\">final</span> short[] array, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">begin</span>,</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">end</span>, <span class=\"keyword\">final</span> short k) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ikey = toIntUnsigned(k);</span><br><span class=\"line\">    <span class=\"comment\">// next line accelerates the possibly common case where the value would</span></span><br><span class=\"line\">    <span class=\"comment\">// be inserted at the end</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">end</span> &gt; <span class=\"number\">0</span>) &amp;&amp; (toIntUnsigned(array[<span class=\"keyword\">end</span> - <span class=\"number\">1</span>]) &lt; ikey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"keyword\">end</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"keyword\">begin</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high = <span class=\"keyword\">end</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 32 in the next line matches the size of a cache line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low + <span class=\"number\">32</span> &lt;= high) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> middleIndex = (low + high) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> middleValue = toIntUnsigned(array[middleIndex]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middleValue &lt; ikey) &#123;</span><br><span class=\"line\">        low = middleIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &gt; ikey) &#123;</span><br><span class=\"line\">        high = middleIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middleIndex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// we finish the job with a sequential search</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = low;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= high; ++x) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> val = toIntUnsigned(array[x]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &gt;= ikey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == ikey) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ArrayContainer\"><a href=\"#ArrayContainer\" class=\"headerlink\" title=\"ArrayContainer\"></a>ArrayContainer</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">short[] content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Container add(<span class=\"keyword\">final</span> short x) &#123;</span><br><span class=\"line\">    int loc = Util.unsignedBinarySearch(content, <span class=\"number\">0</span>, cardinality, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Transform the ArrayContainer to a BitmapContainer</span></span><br><span class=\"line\">      <span class=\"comment\">// when cardinality = DEFAULT_MAX_SIZE</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cardinality &gt;= DEFAULT_MAX_SIZE) &#123;</span><br><span class=\"line\">        BitmapContainer a = <span class=\"keyword\">this</span>.toBitmapContainer();</span><br><span class=\"line\">        a.add(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cardinality &gt;= <span class=\"keyword\">this</span>.content.length) &#123;</span><br><span class=\"line\">        increaseCapacity();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// insertion : shift the elements &gt; x by one position to</span></span><br><span class=\"line\">      <span class=\"comment\">// the right</span></span><br><span class=\"line\">      <span class=\"comment\">// and put x in it's appropriate place</span></span><br><span class=\"line\">      System.arraycopy(content, -loc - <span class=\"number\">1</span>, content, -loc, cardinality + loc + <span class=\"number\">1</span>);</span><br><span class=\"line\">      content[-loc - <span class=\"number\">1</span>] = x;</span><br><span class=\"line\">      ++cardinality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关变量说明：</p>\n<ul>\n<li>content: 为了增删改查的方便性，采用short有序数组来存储数字(注意高16bit已经存储在HighLowContainer中，所以这里只需要存储低16bit的short就满足了)。</li>\n<li>DEFAULT_MAX_SIZE: 由于有序数组在插入时需要做二分查找，效率较低，所以这里有一个限定4096，超过这个大小自动转成BitmapContainer。</li>\n</ul>\n<p><strong>add</strong>流程如下：</p>\n<ol>\n<li>通过二分查找找到x所在的content中的位置，若存在则不处理，不存在则进入下一步。</li>\n<li>对cardinality进行判断，决定是否需要升级Container或者扩容。</li>\n<li>将content中loc之后的子数组后移一位，将数据插入，形成新的content数组。</li>\n</ol>\n<h4 id=\"BitmapContainer\"><a href=\"#BitmapContainer\" class=\"headerlink\" title=\"BitmapContainer\"></a>BitmapContainer</h4><figure class=\"highlight aspectj\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] bitmap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">Container <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">short</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = Util.toIntUnsigned(i);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> previous = bitmap[x / <span class=\"number\">64</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> newval = previous | (<span class=\"number\">1</span>L &lt;&lt; x);</span><br><span class=\"line\">    bitmap[x / <span class=\"number\">64</span>] = newval;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (USE_BRANCHLESS) &#123;</span><br><span class=\"line\">      cardinality += (previous ^ newval) &gt;&gt;&gt; x;</span><br><span class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(previous != newval)</span> </span>&#123;</span><br><span class=\"line\">      ++cardinality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关变量说明：</p>\n<ul>\n<li>bitmap: 1个Container中可以存储65536(2^16bit)个数字Integer，在BitmapContainer中再以long(2^6bit)做分组，形成了long数组。</li>\n</ul>\n<p><strong>add</strong>流程如下:</p>\n<ol>\n<li>通过x/64找到bitmap中的long数组中的位置得到原值previous。</li>\n<li>previous | (1L &lt;&lt; x) 得到newval。</li>\n<li>改变cardinality。<br>可以发现当Integer分布稠密时，容易在一个long中出现连续1的情况，在这种情况下也存在优化空间，可以调用runOptimize升级为RunContainer。</li>\n</ol>\n<h4 id=\"RunContainer\"><a href=\"#RunContainer\" class=\"headerlink\" title=\"RunContainer\"></a>RunContainer</h4><p>主要解决了连续1的情况，例如15、16、17、18可以被优化成15,3。RunContainer中有两个关键变量，valueslength的2n位是具体数值，例如15，2n+1为连续Integer的个数，例如3；nbrruns为valueslength/2被优化的次数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">short</span>[] valueslength;</span><br><span class=\"line\"><span class=\"keyword\">int</span> nbrruns = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>add方法如下所示:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"><span class=\"keyword\">public</span> Container add(<span class=\"keyword\">short</span> k) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> it might be better and simpler to do return</span></span><br><span class=\"line\">    <span class=\"comment\">// toBitmapOrArrayContainer(getCardinality()).add(k)</span></span><br><span class=\"line\">    <span class=\"comment\">// but note that some unit tests use this method to build up test runcontainers without calling</span></span><br><span class=\"line\">    <span class=\"comment\">// runOptimize</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">index</span> = unsignedInterleavedBinarySearch(valueslength, <span class=\"number\">0</span>, nbrruns, k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;<span class=\"comment\">// already there</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">index</span> = -<span class=\"keyword\">index</span> - <span class=\"number\">2</span>;<span class=\"comment\">// points to preceding value, possibly -1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> &gt;= <span class=\"number\">0</span>)   &#123;<span class=\"comment\">// possible match</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> offset = toIntUnsigned(k) - toIntUnsigned(getValue(<span class=\"keyword\">index</span>));</span><br><span class=\"line\">      <span class=\"keyword\">int</span> le = toIntUnsigned(getLength(<span class=\"keyword\">index</span>));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offset &lt;= le) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offset == le + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we may need to fuse</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> + <span class=\"number\">1</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (toIntUnsigned(getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>)) == toIntUnsigned(k) + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// indeed fusion is needed</span></span><br><span class=\"line\">            setLength(<span class=\"keyword\">index</span>,</span><br><span class=\"line\">                (<span class=\"keyword\">short</span>) (getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) + getLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) - getValue(<span class=\"keyword\">index</span>)));</span><br><span class=\"line\">            recoverRoomAtIndex(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        incrementLength(<span class=\"keyword\">index</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> + <span class=\"number\">1</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we may need to fuse</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (toIntUnsigned(getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>)) == toIntUnsigned(k) + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// indeed fusion is needed</span></span><br><span class=\"line\">          setValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, k);</span><br><span class=\"line\">          setLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, (<span class=\"keyword\">short</span>) (getLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) + <span class=\"number\">1</span>));</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// we may need to extend the first run</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getValue(<span class=\"number\">0</span>) == k + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          incrementLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">          decrementValue(<span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    makeRoomAtIndex(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">    setValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, k);</span><br><span class=\"line\">    setLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的决策方法略为复杂，用流程图来表示应该会比较直观。<br><img src=\"http://liaojiayi.com/assets/RunContainerFlow.png\" alt=\"FLOW\"><br>Container之间比较如下：</p>\n<table>\n<thead>\n<tr>\n<th>Container</th>\n<th style=\"text-align:center\">空间利用率</th>\n<th style=\"text-align:right\">查询效率 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayContainer</td>\n<td style=\"text-align:center\">无压缩、低</td>\n<td style=\"text-align:right\">使用二分查找，低</td>\n</tr>\n<tr>\n<td>BitmapContainer</td>\n<td style=\"text-align:center\">无压缩、低</td>\n<td style=\"text-align:right\">直接利用索引命中，高</td>\n</tr>\n<tr>\n<td>RunContainer</td>\n<td style=\"text-align:center\">有压缩、高</td>\n<td style=\"text-align:right\">顺序查找，中</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Paper原文地址</strong>：<a href=\"http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf\" target=\"_blank\" rel=\"noopener\">An Experimental Study of Bitmap Compression vs.<br>Inverted List Compression</a><br>Bitmap可以说是一个很万能的存储了，无论是空间消耗，还是查询响应，在最佳实践下，都可以达到很好的效果。最近做了不少Bitmap的研究，简单的基于上面的Paper去做一个记录。</p>\n<hr>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>从最原始的Bitmap到RoaringBitmap（可能是目前大多数场景的最佳选择？），虽然仔细研究Roaring的原理并不复杂，但也是经过了十几年的变化和迭代。  </p>\n<h4 id=\"WAH-Word-Aligned-Hybrid\"><a href=\"#WAH-Word-Aligned-Hybrid\" class=\"headerlink\" title=\"WAH(Word Aligned Hybrid)\"></a>WAH(Word Aligned Hybrid)</h4><p>这个算法只压缩全0或者全1的group。将所有bits按照连续的31bit进行分组，然后对每一组进行编码，编码后的长度为32bit。具体结构如下图所示：<br><img src=\"http://liaojiayi.com/assets/WAH.png\" alt=\"WAH\"></p>\n<h4 id=\"EWAH-Enhanced-Word-Aligned-Hybrid\"><a href=\"#EWAH-Enhanced-Word-Aligned-Hybrid\" class=\"headerlink\" title=\"EWAH(Enhanced Word Aligned Hybrid)\"></a>EWAH(Enhanced Word Aligned Hybrid)</h4><p>基于WAH加了一个Header，作为元信息的存储。我理解这其实并没有在存储上做到太多帮助的优化，反而是在查询或者插入中，会更加便捷。Header结构如下所示。<br><img src=\"http://liaojiayi.com/assets/EWAH.png\" alt=\"EWAH\"></p>\n<h4 id=\"CONCISE-Compressed-N-Composble-Integer-Set\"><a href=\"#CONCISE-Compressed-N-Composble-Integer-Set\" class=\"headerlink\" title=\"CONCISE(Compressed N Composble Integer Set)\"></a>CONCISE(Compressed N Composble Integer Set)</h4><p>这也是基于WAH做的一个优化。在WAH算法中，只要有一个bit被置1，那么整个group都无法被压缩，这一算法在这种odd bit上做了优化。记录了这个单一odd bit的位置。<br><img src=\"http://liaojiayi.com/assets/CONCISE.png\" alt=\"CONCISE\"></p>\n<h4 id=\"VALWAH-Variable-Aligned-Length-WAH\"><a href=\"#VALWAH-Variable-Aligned-Length-WAH\" class=\"headerlink\" title=\"VALWAH(Variable-Aligned Length WAH)\"></a>VALWAH(Variable-Aligned Length WAH)</h4><p>基于参数的优化，缓解了WAH的每个group固定32bit的限制（因为32bit最多能表示2^31 - 1个压缩group，但是实际上不会那么多）。采用了参数去调控，没有固定的规则，对于不同的bitmap自动采用不同的参数，很影响查询的效率。</p>\n<h4 id=\"Roaring\"><a href=\"#Roaring\" class=\"headerlink\" title=\"Roaring\"></a>Roaring</h4><p>以65535bit分bucket，每个bucket里的integer共享高16bit（为bucket的编号），例如第一个bucket为[0 ~ 65535]，高16bit为0，第二个bucket为[65536 ~ 65536*2 - 1]，高16bit为1。其中，65536中以short integer(16bit)为单位表示integer的低16bit。所以当这个bucket中integer 个数 &gt; 4096时，不存在压缩。</p>\n<hr>\n<h2 id=\"RoaringBitmap源码解读\"><a href=\"#RoaringBitmap源码解读\" class=\"headerlink\" title=\"RoaringBitmap源码解读\"></a>RoaringBitmap源码解读</h2><p>RoaringBitmap的基本构成如下:HighLowContainer中存储了每个Integer的高16bit的公共索引keys以及具体存储数字的Container。由于Container是最终的载体，所以优化基本都在Container里。下面直接分析源码中的Add方法，通过这个方法基本上可以看出Container的内部结构。<br><img src=\"http://liaojiayi.com/assets/RoaringBitmap_basic.png\" alt=\"RoaringBasic\"><br>先看一个代码里比较常出现的binarySearch方法，这里比较灵活的一点是，如果找到则返回对应的index，如果没找到则返回对应位置的负数，这样既可以传递位置信息，又可以传递是否存在的信息。<br><figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> hybridUnsignedBinarySearch(<span class=\"keyword\">final</span> short[] array, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">begin</span>,</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">end</span>, <span class=\"keyword\">final</span> short k) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ikey = toIntUnsigned(k);</span><br><span class=\"line\">    <span class=\"comment\">// next line accelerates the possibly common case where the value would</span></span><br><span class=\"line\">    <span class=\"comment\">// be inserted at the end</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">end</span> &gt; <span class=\"number\">0</span>) &amp;&amp; (toIntUnsigned(array[<span class=\"keyword\">end</span> - <span class=\"number\">1</span>]) &lt; ikey)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"keyword\">end</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"keyword\">begin</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high = <span class=\"keyword\">end</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 32 in the next line matches the size of a cache line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low + <span class=\"number\">32</span> &lt;= high) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> middleIndex = (low + high) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> middleValue = toIntUnsigned(array[middleIndex]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middleValue &lt; ikey) &#123;</span><br><span class=\"line\">        low = middleIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (middleValue &gt; ikey) &#123;</span><br><span class=\"line\">        high = middleIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middleIndex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// we finish the job with a sequential search</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = low;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= high; ++x) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> val = toIntUnsigned(array[x]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &gt;= ikey) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val == ikey) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ArrayContainer\"><a href=\"#ArrayContainer\" class=\"headerlink\" title=\"ArrayContainer\"></a>ArrayContainer</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">short[] content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Container add(<span class=\"keyword\">final</span> short x) &#123;</span><br><span class=\"line\">    int loc = Util.unsignedBinarySearch(content, <span class=\"number\">0</span>, cardinality, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Transform the ArrayContainer to a BitmapContainer</span></span><br><span class=\"line\">      <span class=\"comment\">// when cardinality = DEFAULT_MAX_SIZE</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cardinality &gt;= DEFAULT_MAX_SIZE) &#123;</span><br><span class=\"line\">        BitmapContainer a = <span class=\"keyword\">this</span>.toBitmapContainer();</span><br><span class=\"line\">        a.add(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cardinality &gt;= <span class=\"keyword\">this</span>.content.length) &#123;</span><br><span class=\"line\">        increaseCapacity();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// insertion : shift the elements &gt; x by one position to</span></span><br><span class=\"line\">      <span class=\"comment\">// the right</span></span><br><span class=\"line\">      <span class=\"comment\">// and put x in it's appropriate place</span></span><br><span class=\"line\">      System.arraycopy(content, -loc - <span class=\"number\">1</span>, content, -loc, cardinality + loc + <span class=\"number\">1</span>);</span><br><span class=\"line\">      content[-loc - <span class=\"number\">1</span>] = x;</span><br><span class=\"line\">      ++cardinality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关变量说明：</p>\n<ul>\n<li>content: 为了增删改查的方便性，采用short有序数组来存储数字(注意高16bit已经存储在HighLowContainer中，所以这里只需要存储低16bit的short就满足了)。</li>\n<li>DEFAULT_MAX_SIZE: 由于有序数组在插入时需要做二分查找，效率较低，所以这里有一个限定4096，超过这个大小自动转成BitmapContainer。</li>\n</ul>\n<p><strong>add</strong>流程如下：</p>\n<ol>\n<li>通过二分查找找到x所在的content中的位置，若存在则不处理，不存在则进入下一步。</li>\n<li>对cardinality进行判断，决定是否需要升级Container或者扩容。</li>\n<li>将content中loc之后的子数组后移一位，将数据插入，形成新的content数组。</li>\n</ol>\n<h4 id=\"BitmapContainer\"><a href=\"#BitmapContainer\" class=\"headerlink\" title=\"BitmapContainer\"></a>BitmapContainer</h4><figure class=\"highlight aspectj\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] bitmap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">Container <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">short</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = Util.toIntUnsigned(i);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> previous = bitmap[x / <span class=\"number\">64</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> newval = previous | (<span class=\"number\">1</span>L &lt;&lt; x);</span><br><span class=\"line\">    bitmap[x / <span class=\"number\">64</span>] = newval;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (USE_BRANCHLESS) &#123;</span><br><span class=\"line\">      cardinality += (previous ^ newval) &gt;&gt;&gt; x;</span><br><span class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(previous != newval)</span> </span>&#123;</span><br><span class=\"line\">      ++cardinality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关变量说明：</p>\n<ul>\n<li>bitmap: 1个Container中可以存储65536(2^16bit)个数字Integer，在BitmapContainer中再以long(2^6bit)做分组，形成了long数组。</li>\n</ul>\n<p><strong>add</strong>流程如下:</p>\n<ol>\n<li>通过x/64找到bitmap中的long数组中的位置得到原值previous。</li>\n<li>previous | (1L &lt;&lt; x) 得到newval。</li>\n<li>改变cardinality。<br>可以发现当Integer分布稠密时，容易在一个long中出现连续1的情况，在这种情况下也存在优化空间，可以调用runOptimize升级为RunContainer。</li>\n</ol>\n<h4 id=\"RunContainer\"><a href=\"#RunContainer\" class=\"headerlink\" title=\"RunContainer\"></a>RunContainer</h4><p>主要解决了连续1的情况，例如15、16、17、18可以被优化成15,3。RunContainer中有两个关键变量，valueslength的2n位是具体数值，例如15，2n+1为连续Integer的个数，例如3；nbrruns为valueslength/2被优化的次数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">short</span>[] valueslength;</span><br><span class=\"line\"><span class=\"keyword\">int</span> nbrruns = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>add方法如下所示:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"><span class=\"keyword\">public</span> Container add(<span class=\"keyword\">short</span> k) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> it might be better and simpler to do return</span></span><br><span class=\"line\">    <span class=\"comment\">// toBitmapOrArrayContainer(getCardinality()).add(k)</span></span><br><span class=\"line\">    <span class=\"comment\">// but note that some unit tests use this method to build up test runcontainers without calling</span></span><br><span class=\"line\">    <span class=\"comment\">// runOptimize</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">index</span> = unsignedInterleavedBinarySearch(valueslength, <span class=\"number\">0</span>, nbrruns, k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;<span class=\"comment\">// already there</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">index</span> = -<span class=\"keyword\">index</span> - <span class=\"number\">2</span>;<span class=\"comment\">// points to preceding value, possibly -1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> &gt;= <span class=\"number\">0</span>)   &#123;<span class=\"comment\">// possible match</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> offset = toIntUnsigned(k) - toIntUnsigned(getValue(<span class=\"keyword\">index</span>));</span><br><span class=\"line\">      <span class=\"keyword\">int</span> le = toIntUnsigned(getLength(<span class=\"keyword\">index</span>));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offset &lt;= le) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offset == le + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we may need to fuse</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> + <span class=\"number\">1</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (toIntUnsigned(getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>)) == toIntUnsigned(k) + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// indeed fusion is needed</span></span><br><span class=\"line\">            setLength(<span class=\"keyword\">index</span>,</span><br><span class=\"line\">                (<span class=\"keyword\">short</span>) (getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) + getLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) - getValue(<span class=\"keyword\">index</span>)));</span><br><span class=\"line\">            recoverRoomAtIndex(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        incrementLength(<span class=\"keyword\">index</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> + <span class=\"number\">1</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we may need to fuse</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (toIntUnsigned(getValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>)) == toIntUnsigned(k) + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// indeed fusion is needed</span></span><br><span class=\"line\">          setValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, k);</span><br><span class=\"line\">          setLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, (<span class=\"keyword\">short</span>) (getLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>) + <span class=\"number\">1</span>));</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">index</span> == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// we may need to extend the first run</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; nbrruns) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getValue(<span class=\"number\">0</span>) == k + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          incrementLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">          decrementValue(<span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    makeRoomAtIndex(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">    setValue(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, k);</span><br><span class=\"line\">    setLength(<span class=\"keyword\">index</span> + <span class=\"number\">1</span>, (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的决策方法略为复杂，用流程图来表示应该会比较直观。<br><img src=\"http://liaojiayi.com/assets/RunContainerFlow.png\" alt=\"FLOW\"><br>Container之间比较如下：</p>\n<table>\n<thead>\n<tr>\n<th>Container</th>\n<th style=\"text-align:center\">空间利用率</th>\n<th style=\"text-align:right\">查询效率 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayContainer</td>\n<td style=\"text-align:center\">无压缩、低</td>\n<td style=\"text-align:right\">使用二分查找，低</td>\n</tr>\n<tr>\n<td>BitmapContainer</td>\n<td style=\"text-align:center\">无压缩、低</td>\n<td style=\"text-align:right\">直接利用索引命中，高</td>\n</tr>\n<tr>\n<td>RunContainer</td>\n<td style=\"text-align:center\">有压缩、高</td>\n<td style=\"text-align:right\">顺序查找，中</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Flink的Exactly-Once","author":"Liao Jiayi","date":"2018-03-19T17:41:00.000Z","articleId":"flink-eo","_content":"[Official Document](https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html)\n### 闲扯\n最近Spark2.3正式发布，流处理不再试Beta版，Spark的Structure Streaming几乎是拥有了Flink的所有功能，生态社区做得好就是不一样，Flink该加把劲了...\n***\n### 引言\nExactly-once是一个经常提到的语义，也是程序开发中，需要尽可能做到的一个理想状态。这种语义其实放在分布式程序中有很多种理解，比如读取数据源Exactly-once，Process过程Exactly-once，存储数据Exactly-once，但我们常用的理解方式是End-to-end的语义，也就是说，每一个输入，只会影响一次输出。\n***\n### Exacly-once\n既然是分布式的程序，要达到Exactly-once的语义，在输出那层，就应该只有两种情况，要么一起输出，要么一起不输出。Flink为此就提供了一个**TwoPhaseCommitSinkFunction**的抽象类用来完成这一语义，[JIRA](https://issues.apache.org/jira/browse/FLINK-7210)，[PR](https://github.com/apache/flink/pull/4368)。\n顾名思义，此类利用了Checkpoint机制提供了两个Phase(步骤)：\n\n1. preCommit()\n2. commit()\n\n#### preCommit()示意图：    \n![flink-precommit][1]  \n这个示意图描述了一个从kafka读取数据，采用WindowFunction做处理，最后再存储到kafka里的数据流。在Checkpoint过程中，首先在Datasource上用barrier把数据流切成两部分并不断传递下去触发snapshot，以保证所有的snapshot都是在相同一部分数据下产生的，最后一个阶段调用Sink函数的Pre-commit()表示，所有的Taskmanager的Sink都可以进行commit()操作了。\n\n**注意此时并不能直接commit，因为taskmanager之间彼此并不知道其他的节点是否准备好了commit！**\n\n#### commit()示意图：   \n![flink-commit][2]  \n在checkpoint结束之后，JobManager会通知Listener们调用各自的Callback，**此时Sink对象如果收到了JobManager发出的checkpointCompleted的通知，就知道所有的节点都准备好commit**，然后此时才是真正的commit。\n\n*** \n### 用法详解\n简单来说，其实就是两步输出达到Exactly-once的思想，在很多地方都有用到。比如Hive在写表时，先将要写入的文件放入一个临时目录，然后再移入到target directory。\n\n**对应到程序里就4个步骤**：\n* beginTransaction - 开始这个事务，比如创建一个临时目录\n* preCommit - 开始准备最后的commit，比如flush数据到临时目录中\n* commit - 真正的提交数据，比如将临时目录下的数据移动到最终目录下\n* abort - 删除临时目录\n\n···\n稍后我会写一个示例放出来\n···\n\n\n\n\n[1]: http://liaojiayi.com/assets/flink-2.png\n[2]: http://liaojiayi.com/assets/flink-3.png\n","source":"_posts/flink-exactly-once.md","raw":"title: Flink的Exactly-Once\nauthor: Liao Jiayi\ndate: 2018-03-20 01:41:00\ntags: \n- flink\n- exactly-once\narticleId: flink-eo\n---\n[Official Document](https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html)\n### 闲扯\n最近Spark2.3正式发布，流处理不再试Beta版，Spark的Structure Streaming几乎是拥有了Flink的所有功能，生态社区做得好就是不一样，Flink该加把劲了...\n***\n### 引言\nExactly-once是一个经常提到的语义，也是程序开发中，需要尽可能做到的一个理想状态。这种语义其实放在分布式程序中有很多种理解，比如读取数据源Exactly-once，Process过程Exactly-once，存储数据Exactly-once，但我们常用的理解方式是End-to-end的语义，也就是说，每一个输入，只会影响一次输出。\n***\n### Exacly-once\n既然是分布式的程序，要达到Exactly-once的语义，在输出那层，就应该只有两种情况，要么一起输出，要么一起不输出。Flink为此就提供了一个**TwoPhaseCommitSinkFunction**的抽象类用来完成这一语义，[JIRA](https://issues.apache.org/jira/browse/FLINK-7210)，[PR](https://github.com/apache/flink/pull/4368)。\n顾名思义，此类利用了Checkpoint机制提供了两个Phase(步骤)：\n\n1. preCommit()\n2. commit()\n\n#### preCommit()示意图：    \n![flink-precommit][1]  \n这个示意图描述了一个从kafka读取数据，采用WindowFunction做处理，最后再存储到kafka里的数据流。在Checkpoint过程中，首先在Datasource上用barrier把数据流切成两部分并不断传递下去触发snapshot，以保证所有的snapshot都是在相同一部分数据下产生的，最后一个阶段调用Sink函数的Pre-commit()表示，所有的Taskmanager的Sink都可以进行commit()操作了。\n\n**注意此时并不能直接commit，因为taskmanager之间彼此并不知道其他的节点是否准备好了commit！**\n\n#### commit()示意图：   \n![flink-commit][2]  \n在checkpoint结束之后，JobManager会通知Listener们调用各自的Callback，**此时Sink对象如果收到了JobManager发出的checkpointCompleted的通知，就知道所有的节点都准备好commit**，然后此时才是真正的commit。\n\n*** \n### 用法详解\n简单来说，其实就是两步输出达到Exactly-once的思想，在很多地方都有用到。比如Hive在写表时，先将要写入的文件放入一个临时目录，然后再移入到target directory。\n\n**对应到程序里就4个步骤**：\n* beginTransaction - 开始这个事务，比如创建一个临时目录\n* preCommit - 开始准备最后的commit，比如flush数据到临时目录中\n* commit - 真正的提交数据，比如将临时目录下的数据移动到最终目录下\n* abort - 删除临时目录\n\n···\n稍后我会写一个示例放出来\n···\n\n\n\n\n[1]: http://liaojiayi.com/assets/flink-2.png\n[2]: http://liaojiayi.com/assets/flink-3.png\n","slug":"flink-exactly-once","published":1,"updated":"2018-07-18T10:43:18.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjr2ad8y0008rgugre7ee4v8","content":"<p><a href=\"https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html\" target=\"_blank\" rel=\"noopener\">Official Document</a></p>\n<h3 id=\"闲扯\"><a href=\"#闲扯\" class=\"headerlink\" title=\"闲扯\"></a>闲扯</h3><p>最近Spark2.3正式发布，流处理不再试Beta版，Spark的Structure Streaming几乎是拥有了Flink的所有功能，生态社区做得好就是不一样，Flink该加把劲了…</p>\n<hr>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Exactly-once是一个经常提到的语义，也是程序开发中，需要尽可能做到的一个理想状态。这种语义其实放在分布式程序中有很多种理解，比如读取数据源Exactly-once，Process过程Exactly-once，存储数据Exactly-once，但我们常用的理解方式是End-to-end的语义，也就是说，每一个输入，只会影响一次输出。</p>\n<hr>\n<h3 id=\"Exacly-once\"><a href=\"#Exacly-once\" class=\"headerlink\" title=\"Exacly-once\"></a>Exacly-once</h3><p>既然是分布式的程序，要达到Exactly-once的语义，在输出那层，就应该只有两种情况，要么一起输出，要么一起不输出。Flink为此就提供了一个<strong>TwoPhaseCommitSinkFunction</strong>的抽象类用来完成这一语义，<a href=\"https://issues.apache.org/jira/browse/FLINK-7210\" target=\"_blank\" rel=\"noopener\">JIRA</a>，<a href=\"https://github.com/apache/flink/pull/4368\" target=\"_blank\" rel=\"noopener\">PR</a>。<br>顾名思义，此类利用了Checkpoint机制提供了两个Phase(步骤)：</p>\n<ol>\n<li>preCommit()</li>\n<li>commit()</li>\n</ol>\n<h4 id=\"preCommit-示意图：\"><a href=\"#preCommit-示意图：\" class=\"headerlink\" title=\"preCommit()示意图：\"></a>preCommit()示意图：</h4><p><img src=\"http://liaojiayi.com/assets/flink-2.png\" alt=\"flink-precommit\"><br>这个示意图描述了一个从kafka读取数据，采用WindowFunction做处理，最后再存储到kafka里的数据流。在Checkpoint过程中，首先在Datasource上用barrier把数据流切成两部分并不断传递下去触发snapshot，以保证所有的snapshot都是在相同一部分数据下产生的，最后一个阶段调用Sink函数的Pre-commit()表示，所有的Taskmanager的Sink都可以进行commit()操作了。</p>\n<p><strong>注意此时并不能直接commit，因为taskmanager之间彼此并不知道其他的节点是否准备好了commit！</strong></p>\n<h4 id=\"commit-示意图：\"><a href=\"#commit-示意图：\" class=\"headerlink\" title=\"commit()示意图：\"></a>commit()示意图：</h4><p><img src=\"http://liaojiayi.com/assets/flink-3.png\" alt=\"flink-commit\"><br>在checkpoint结束之后，JobManager会通知Listener们调用各自的Callback，<strong>此时Sink对象如果收到了JobManager发出的checkpointCompleted的通知，就知道所有的节点都准备好commit</strong>，然后此时才是真正的commit。</p>\n<hr>\n<h3 id=\"用法详解\"><a href=\"#用法详解\" class=\"headerlink\" title=\"用法详解\"></a>用法详解</h3><p>简单来说，其实就是两步输出达到Exactly-once的思想，在很多地方都有用到。比如Hive在写表时，先将要写入的文件放入一个临时目录，然后再移入到target directory。</p>\n<p><strong>对应到程序里就4个步骤</strong>：</p>\n<ul>\n<li>beginTransaction - 开始这个事务，比如创建一个临时目录</li>\n<li>preCommit - 开始准备最后的commit，比如flush数据到临时目录中</li>\n<li>commit - 真正的提交数据，比如将临时目录下的数据移动到最终目录下</li>\n<li>abort - 删除临时目录</li>\n</ul>\n<p>···<br>稍后我会写一个示例放出来<br>···</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html\" target=\"_blank\" rel=\"noopener\">Official Document</a></p>\n<h3 id=\"闲扯\"><a href=\"#闲扯\" class=\"headerlink\" title=\"闲扯\"></a>闲扯</h3><p>最近Spark2.3正式发布，流处理不再试Beta版，Spark的Structure Streaming几乎是拥有了Flink的所有功能，生态社区做得好就是不一样，Flink该加把劲了…</p>\n<hr>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>Exactly-once是一个经常提到的语义，也是程序开发中，需要尽可能做到的一个理想状态。这种语义其实放在分布式程序中有很多种理解，比如读取数据源Exactly-once，Process过程Exactly-once，存储数据Exactly-once，但我们常用的理解方式是End-to-end的语义，也就是说，每一个输入，只会影响一次输出。</p>\n<hr>\n<h3 id=\"Exacly-once\"><a href=\"#Exacly-once\" class=\"headerlink\" title=\"Exacly-once\"></a>Exacly-once</h3><p>既然是分布式的程序，要达到Exactly-once的语义，在输出那层，就应该只有两种情况，要么一起输出，要么一起不输出。Flink为此就提供了一个<strong>TwoPhaseCommitSinkFunction</strong>的抽象类用来完成这一语义，<a href=\"https://issues.apache.org/jira/browse/FLINK-7210\" target=\"_blank\" rel=\"noopener\">JIRA</a>，<a href=\"https://github.com/apache/flink/pull/4368\" target=\"_blank\" rel=\"noopener\">PR</a>。<br>顾名思义，此类利用了Checkpoint机制提供了两个Phase(步骤)：</p>\n<ol>\n<li>preCommit()</li>\n<li>commit()</li>\n</ol>\n<h4 id=\"preCommit-示意图：\"><a href=\"#preCommit-示意图：\" class=\"headerlink\" title=\"preCommit()示意图：\"></a>preCommit()示意图：</h4><p><img src=\"http://liaojiayi.com/assets/flink-2.png\" alt=\"flink-precommit\"><br>这个示意图描述了一个从kafka读取数据，采用WindowFunction做处理，最后再存储到kafka里的数据流。在Checkpoint过程中，首先在Datasource上用barrier把数据流切成两部分并不断传递下去触发snapshot，以保证所有的snapshot都是在相同一部分数据下产生的，最后一个阶段调用Sink函数的Pre-commit()表示，所有的Taskmanager的Sink都可以进行commit()操作了。</p>\n<p><strong>注意此时并不能直接commit，因为taskmanager之间彼此并不知道其他的节点是否准备好了commit！</strong></p>\n<h4 id=\"commit-示意图：\"><a href=\"#commit-示意图：\" class=\"headerlink\" title=\"commit()示意图：\"></a>commit()示意图：</h4><p><img src=\"http://liaojiayi.com/assets/flink-3.png\" alt=\"flink-commit\"><br>在checkpoint结束之后，JobManager会通知Listener们调用各自的Callback，<strong>此时Sink对象如果收到了JobManager发出的checkpointCompleted的通知，就知道所有的节点都准备好commit</strong>，然后此时才是真正的commit。</p>\n<hr>\n<h3 id=\"用法详解\"><a href=\"#用法详解\" class=\"headerlink\" title=\"用法详解\"></a>用法详解</h3><p>简单来说，其实就是两步输出达到Exactly-once的思想，在很多地方都有用到。比如Hive在写表时，先将要写入的文件放入一个临时目录，然后再移入到target directory。</p>\n<p><strong>对应到程序里就4个步骤</strong>：</p>\n<ul>\n<li>beginTransaction - 开始这个事务，比如创建一个临时目录</li>\n<li>preCommit - 开始准备最后的commit，比如flush数据到临时目录中</li>\n<li>commit - 真正的提交数据，比如将临时目录下的数据移动到最终目录下</li>\n<li>abort - 删除临时目录</li>\n</ul>\n<p>···<br>稍后我会写一个示例放出来<br>···</p>\n"},{"title":"hs_err_pid.log里是些什么？","author":"Liao Jiayi","articleId":"linux-hs_err_pid","date":"2018-04-11T12:28:03.000Z","_content":"{% codeblock %}\n# There is insufficient memory for the Java Runtime Environment to continue.\n# Native memory allocation (mmap) failed to map 12288 bytes for committing reserved memory.\n# Possible reasons:\n#   The system is out of physical RAM or swap space\n#   In 32 bit mode, the process size limit was hit\n# Possible solutions:\n#   Reduce memory load on the system\n#   Increase physical memory or swap space\n#   Check if swap backing store is full\n#   Use 64 bit Java on a 64 bit OS\n#   Decrease Java heap size (-Xmx/-Xms)\n#   Decrease number of Java threads\n#   Decrease Java thread stack sizes (-Xss)\n#   Set larger code cache with -XX:ReservedCodeCacheSize=\n# This output file may be truncated or incomplete.\n#\n#  Out of Memory Error (os_linux.cpp:2673), pid=13016, tid=140682742126336\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_40-b25) (build 1.8.0_40-b25)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.40-b25 mixed mode linux-amd64 compressed oops)\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n{% endcodeblock %}\n\n\n第一部分主要是程序crash的原因以及相关的solution。\n{% codeblock %}\nCurrent thread (0x00007ff2d8001000):  JavaThread \"flink-akka.remote.default-remote-dispatcher-15\" daemon [_thread_new, id=31925, stack(0x00007ff340ced000,0x00007ff340dee000)]\n\nStack: [0x00007ff340ced000,0x00007ff340dee000],  sp=0x00007ff340dec9a0,  free space=1022k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0xaaca9a]  VMError::report_and_die()+0x2ba\nV  [libjvm.so+0x4f333b]  report_vm_out_of_memory(char const*, int, unsigned long, VMErrorType, char const*)+0x8b\nV  [libjvm.so+0x90e8c3]  os::Linux::commit_memory_impl(char*, unsigned long, bool)+0x103\nV  [libjvm.so+0x90e98c]  os::pd_commit_memory(char*, unsigned long, bool)+0xc\nV  [libjvm.so+0x90772a]  os::commit_memory(char*, unsigned long, bool)+0x2a\nV  [libjvm.so+0x90c97f]  os::pd_create_stack_guard_pages(char*, unsigned long)+0x7f\nV  [libjvm.so+0xa52b4e]  JavaThread::create_stack_guard_pages()+0x5e\nV  [libjvm.so+0xa5c9b4]  JavaThread::run()+0x34\nV  [libjvm.so+0x910ee8]  java_start(Thread*)+0x108\nC  [libpthread.so.0+0x7dc5]  start_thread+0xc5\n{% endcodeblock %}\nCurrent Thread表示crash时程序所处的线程。\n**线程类别**: JavaThread，共有以下几种\n* JavaThread\n* VMThread（负责VM内的一些操作，包括GC）\n* CompilerThread\n* GCTaskThread\n* WatcherThread\n* ConcurrentMarkSweepThread\n\n**线程状态**：_thread_new\n\n线程状态 | 描述\n- | -\n _thread_uninitialized | 线程未被创建\n _thread_new | 线程创建但并未执行\n _thread_in_native | 线程正在运行native code\n _thread_in_vm | 执行VM的code\n _thread_in_java | 执行java的code\n _thread_blocked | 被block住的线程\n\n**原生堆栈信息（Native frames）**: 主要是一些jvm动态库的对战信息，是分析crash中比较重要的一个部分。\n{% codeblock %}\nJava Threads: ( => current thread )\n=>0x00007ff2d8001000 JavaThread \"flink-akka.remote.default-remote-dispatcher-15\" daemon [_thread_new, id=31925, stack(0x00007ff340ced000,0x00007ff340dee000)]\n  0x00007ff2ec053800 JavaThread \"Hashed wheel timer #1\" daemon [_thread_blocked, id=14219, stack(0x00007ff33bdfe000,0x00007ff33beff000)]\n  0x00007ff2dc130800 JavaThread \"New I/O server boss #6\" daemon [_thread_in_native, id=14218, stack(0x00007ff33beff000,0x00007ff33c000000)]\n  0x00007ff2dc119800 JavaThread \"New I/O worker #5\" daemon [_thread_in_native, id=14217, stack(0x00007ff3400e3000,0x00007ff3401e4000)]\n  0x00007ff2dc0b6000 JavaThread \"New I/O worker #4\" daemon [_thread_in_native, id=14216, stack(0x00007ff3401e4000,0x00007ff3402e5000)]\n  0x00007ff2dc0bb800 JavaThread \"New I/O boss #3\" daemon [_thread_in_native, id=14215, stack(0x00007ff3402e5000,0x00007ff3403e6000)]\n  0x00007ff2dc05c000 JavaThread \"New I/O worker #2\" daemon [_thread_in_native, id=14214, stack(0x00007ff3403e6000,0x00007ff3404e7000)]\n  0x00007ff2dc052000 JavaThread \"New I/O worker #1\" daemon [_thread_in_native, id=14213, stack(0x00007ff3404e7000,0x00007ff3405e8000)]\n  0x00007ff2c8009800 JavaThread \"flink-akka.remote.default-remote-dispatcher-7\" daemon [_thread_in_vm, id=14206, stack(0x00007ff3407e8000,0x00007ff3408e9000)]\n  0x00007ff2c800c000 JavaThread \"flink-akka.remote.default-remote-dispatcher-6\" daemon [_thread_in_native, id=14202, stack(0x00007ff3408e9000,0x00007ff3409ea000)]\n  0x00007ff2cc020000 JavaThread \"flink-akka.actor.default-dispatcher-5\" daemon [_thread_blocked, id=14147, stack(0x00007ff3409ea000,0x00007ff340aeb000)]\n  0x00007ff36222a800 JavaThread \"flink-akka.actor.default-dispatcher-4\" daemon [_thread_blocked, id=14136, stack(0x00007ff340aeb000,0x00007ff340bec000)]\n  0x00007ff362229000 JavaThread \"flink-akka.actor.default-dispatcher-3\" daemon [_thread_blocked, id=14135, stack(0x00007ff340bec000,0x00007ff340ced000)]\n  0x00007ff362183000 JavaThread \"flink-scheduler-1\" daemon [_thread_blocked, id=14044, stack(0x00007ff340fee000,0x00007ff3410ef000)]\n  0x00007ff3614b4000 JavaThread \"Timer for 'phoenix' metrics system\" daemon [_thread_blocked, id=14032, stack(0x00007ff342dfa000,0x00007ff342efb000)]\n  0x00007ff360fc1000 JavaThread \"main-EventThread\" daemon [_thread_blocked, id=14031, stack(0x00007ff3431fc000,0x00007ff3432fd000)]\n  0x00007ff360faf000 JavaThread \"main-SendThread(cnzk2:2181)\" daemon [_thread_in_native, id=14030, stack(0x00007ff3432fd000,0x00007ff3433fe000)]\n  0x00007ff360471000 JavaThread \"Thread-80\" daemon [_thread_blocked, id=14029, stack(0x00007ff3430fb000,0x00007ff3431fc000)]\n  0x00007ff3608a7000 JavaThread \"IPC Parameter Sending Thread #0\" daemon [_thread_blocked, id=13178, stack(0x00007ff3437fe000,0x00007ff3438ff000)]\n  0x00007ff3608a4000 JavaThread \"IPC Client (1508059488) connection to cnhm0/10.0.1.222:8032 from apps\" daemon [_thread_blocked, id=13177, stack(0x00007ff348923000,0x00007ff348a24000)]\n  0x00007ff3600df800 JavaThread \"Service Thread\" daemon [_thread_blocked, id=13172, stack(0x00007ff3498c5000,0x00007ff3499c6000)]\n  0x00007ff3600d2000 JavaThread \"C1 CompilerThread2\" daemon [_thread_in_native, id=13171, stack(0x00007ff3499c6000,0x00007ff349ac7000)]\n  0x00007ff3600d0000 JavaThread \"C2 CompilerThread1\" daemon [_thread_blocked, id=13170, stack(0x00007ff349ac7000,0x00007ff349bc8000)]\n  0x00007ff3600cd000 JavaThread \"C2 CompilerThread0\" daemon [_thread_blocked, id=13169, stack(0x00007ff349bc8000,0x00007ff349cc9000)]\n  0x00007ff3600cb000 JavaThread \"JDWP Event Helper Thread\" daemon [_thread_blocked, id=13168, stack(0x00007ff349cc9000,0x00007ff349dca000)]\n  0x00007ff3600c7000 JavaThread \"JDWP Transport Listener: dt_socket\" daemon [_thread_in_native, id=13167, stack(0x00007ff349dca000,0x00007ff349ecb000)]\n  0x00007ff3600b8000 JavaThread \"Signal Dispatcher\" daemon [_thread_blocked, id=13166, stack(0x00007ff34a0cf000,0x00007ff34a1d0000)]\n  0x00007ff36008c000 JavaThread \"Finalizer\" daemon [_thread_blocked, id=13165, stack(0x00007ff34a1d0000,0x00007ff34a2d1000)]\n  0x00007ff36008a000 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=13164, stack(0x00007ff34a2d1000,0x00007ff34a3d2000)]\n  0x00007ff360017000 JavaThread \"main\" [_thread_blocked, id=13158, stack(0x00007ff369c7a000,0x00007ff369d7b000)]\n\nOther Threads:\n  0x00007ff360085000 VMThread [stack: 0x00007ff34a3d2000,0x00007ff34a4d3000] [id=13163]\n  0x00007ff3600e2000 WatcherThread [stack: 0x00007ff3497c4000,0x00007ff3498c5000] [id=13173]\n{% endcodeblock %}\n这一部分是crash时Java代码中所有线程的状况。分析类似上一部分。\n{% codeblock %}\nVM state:not at safepoint (normal execution)\nVM Mutex/Monitor currently owned by a thread: None\n{% endcodeblock %}\n**VM状态**：\n\n状态 | 描述\n- | :-: |\nnot at a safepoint | 正常执行\nat safepoint | 所有VM内的线程被block住，在等待某一个VM操作完成\nsynchronizing | 一个特殊VM操作需要执行，VM在等待所有线程block\n\n{% codeblock %}\nHeap:\n PSYoungGen  total 39424K, used 31166K [0x0000000771a00000, 0x0000000774780000, 0x00000007c0000000)\n  eden space 38912K, 79% used [0x0000000771a00000,0x000000077384faf0,0x0000000774000000)\n  from space 512K, 25% used [0x0000000774680000,0x00000007746a0000,0x0000000774700000)\n  to   space 512K, 0% used [0x0000000774700000,0x0000000774700000,0x0000000774780000)\n ParOldGen   total 124928K, used 67043K [0x00000006d4e00000, 0x00000006dc800000, 0x0000000771a00000)\n  object space 124928K, 53% used [0x00000006d4e00000,0x00000006d8f78d18,0x00000006dc800000)\n Metaspace   used 54122K, capacity 54748K, committed 54912K, reserved 1097728K\n  class spaceused 6562K, capacity 6716K, committed 6784K, reserved 1048576K\n\nCard table byte_map: [0x00007ff3664db000,0x00007ff366c35000] byte_map_base: 0x00007ff362e34000\n\nMarking Bits: (ParMarkBitMap*) 0x00007ff3691426c0\n Begin Bits: [0x00007ff324a70000, 0x00007ff328538000)\n End Bits:   [0x00007ff328538000, 0x00007ff32c000000)\n\nPolling page: 0x00007ff369d84000\n\nCodeCache: size=245760Kb used=17958Kb max_used=18385Kb free=227801Kb\n bounds [0x00007ff34aad9000, 0x00007ff34bd29000, 0x00007ff359ad9000]\n total_blobs=6019 nmethods=5425 adapters=516\n compilation: enabled\n{% endcodeblock %}\n* Card Table是jvm维护的一种数据结构，用于记录更改对象时的引用，方便GC。\n* CodeCache是用来保存本地代码的，不属于PermGen。\n\n{% codeblock %}\nCompilation events (10 events):\nGC Heap History (10 events):\nDeoptimization events (10 events):\nInternal exceptions (10 events):\nEvents (10 events):\nDynamic libraries:\n{% endcodeblock %}\n\n这些都是表示crash时jvm最近的一些操作。举个例子说明：\n{% codeblock %}\nEvents (10 events):\nEvent: 2603309.010 Thread 0x00007ff2c800c000 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3409e88a8 mode 2\nEvent: 2603310.108 Thread 0x00007ff362229000 DEOPT PACKING pc=0x00007ff34b25ce6c sp=0x00007ff340ceb660\nEvent: 2603310.122 Thread 0x00007ff2c8009800 Uncommon trap: trap_request=0xffffff65 fr.pc=0x00007ff34b890e40\nEvent: 2603310.124 Thread 0x00007ff2c8009800 DEOPT PACKING pc=0x00007ff34b890e40 sp=0x00007ff3408e7790\nEvent: 2603310.124 Thread 0x00007ff2c8009800 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3408e7680 mode 2\nEvent: 2603310.125 Thread 0x00007ff2c8009800 Uncommon trap: trap_request=0xffffff65 fr.pc=0x00007ff34b850fe4\nEvent: 2603310.125 Thread 0x00007ff2c8009800 DEOPT PACKING pc=0x00007ff34b850fe4 sp=0x00007ff3408e7560\nEvent: 2603310.125 Thread 0x00007ff2c8009800 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3408e72d8 mode 2\nEvent: 2603310.126 Thread 0x00007ff362229000 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff340ceb628 mode 2\nEvent: 2603310.935 Thread 0x00007ff2d8001000 Thread added: 0x00007ff2d8001000\n{% endcodeblock %}\n\n上述是最近10个runtime VM的事件，拿第一条举例，2603309.010是从VM启动后的时长，单位是秒，pc是program counter，sp是stack pointer。关于 DEOPT、Uncommon trap等的解释可以看这个[issue](https://stackoverflow.com/questions/49716694/what-are-events-in-hs-err-pid-log/49716888#49716888)，大概就是编译的时候，编译器做了一些优化，但是在runtime时发现这个优化没有用，所以叫去优化（deoptimization）。\n{% codeblock %}\n---------------  S Y S T E M  ---------------\n\nOS:Amazon Linux AMI release 2016.03\n\nuname:Linux 4.4.11-23.53.amzn1.x86_64 #1 SMP Wed Jun 1 22:22:50 UTC 2016 x86_64\nlibc:glibc 2.17 NPTL 2.17\nrlimit: STACK 8192k, CORE 0k, NPROC 65536, NOFILE 65536, AS infinity\nload average:10.84 2.76 1.17\n\n/proc/meminfo:\nMemTotal:   15403948 kB\nMemFree: 2637700 kB\nMemAvailable:2571132 kB\nBuffers: 304 kB\nCached:13784 kB\nSwapCached:0 kB\nActive: 12625320 kB\nInactive:   7684 kB\nActive(anon):   12619252 kB\nInactive(anon):  336 kB\nActive(file):   6068 kB\nInactive(file): 7348 kB\nUnevictable:   0 kB\nMlocked:   0 kB\nSwapTotal: 0 kB\nSwapFree:  0 kB\nDirty:16 kB\nWriteback:56 kB\nAnonPages:  12606968 kB\nMapped:10896 kB\nShmem:   356 kB\nSlab:  46004 kB\nSReclaimable:  22384 kB\nSUnreclaim:23620 kB\nKernelStack:9856 kB\nPageTables:38084 kB\nNFS_Unstable:  0 kB\nBounce:0 kB\nWritebackTmp:  0 kB\nCommitLimit: 7701972 kB\nCommitted_AS:   18337652 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:   0 kB\nVmallocChunk:  0 kB\nAnonHugePages: 0 kB\nHugePages_Total:   0\nHugePages_Free:0\nHugePages_Rsvd:0\nHugePages_Surp:0\nHugepagesize:   2048 kB\nDirectMap4k:   12288 kB\nDirectMap2M:15716352 kB\n{% endcodeblock %}\n系统内存情况：\n\n名词 | 描述 | 名词 | 描述 | 名词 | 描述\n- | :-: | :-: | :-: | :-: | :-\nMemToal | 总内存 | MemFree | 未使用内存 | MemAvailable | 可用内存\nBuffers | 文件读写Buffer | Cached | 缓存 | SwapCached | 缓存的交换空间\nActive | 最近被申请过的空间 | Inactive | 最近未被申请过的空间 | Active(anon) | ..\nInactive(anon) | .. | Active(file) | .. | Inactive(file) | ..\nUnevictable | .. | Unevictable | .. | Mlocked | ..\nSwapTotal | 可用交换空间 | SwapFree | 可用交换空间 | Dirty | 等待写入磁盘的空间\nWriteback | 正在被写入磁盘的空间 | AnonPages | .. | Mapped | ..\nShmem | .. | Slab | kernel使用 | Sreclaimable | ..\nSUnreclaim | .. | KernelStack | .. | PageTables | 内存页映射表空间\nNFS_Unstable | .. | Bounce | .. | WritebackTmp | ..\nCommitLimit | .. | Committed_AS | 完成workload最坏情况的内存使用情况 | VmallocTotal | ..\nVmallocUsed | 虚拟空间可映射的大小 | VmallocUsed | 已使用的虚拟空间映射大小 | VmallocChunk | 虚拟空间最大的虚拟空间块\nAnonHugePages | .. | HugePages_Total | .. | HugePages_Free | ..\nHugePages_Rsvd | .. | HugePages_Surp | .. | Hugepagesize | ..\nDirectMap4k | .. | DirectMap2M | ..\n\n\n\n","source":"_posts/hs-err-pid-log.md","raw":"title: hs_err_pid.log里是些什么？\nauthor: Liao Jiayi\ntags:\n  - memory\n  - linux\narticleId: linux-hs_err_pid\ncategories: []\ndate: 2018-04-11 20:28:03\n---\n{% codeblock %}\n# There is insufficient memory for the Java Runtime Environment to continue.\n# Native memory allocation (mmap) failed to map 12288 bytes for committing reserved memory.\n# Possible reasons:\n#   The system is out of physical RAM or swap space\n#   In 32 bit mode, the process size limit was hit\n# Possible solutions:\n#   Reduce memory load on the system\n#   Increase physical memory or swap space\n#   Check if swap backing store is full\n#   Use 64 bit Java on a 64 bit OS\n#   Decrease Java heap size (-Xmx/-Xms)\n#   Decrease number of Java threads\n#   Decrease Java thread stack sizes (-Xss)\n#   Set larger code cache with -XX:ReservedCodeCacheSize=\n# This output file may be truncated or incomplete.\n#\n#  Out of Memory Error (os_linux.cpp:2673), pid=13016, tid=140682742126336\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_40-b25) (build 1.8.0_40-b25)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.40-b25 mixed mode linux-amd64 compressed oops)\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n{% endcodeblock %}\n\n\n第一部分主要是程序crash的原因以及相关的solution。\n{% codeblock %}\nCurrent thread (0x00007ff2d8001000):  JavaThread \"flink-akka.remote.default-remote-dispatcher-15\" daemon [_thread_new, id=31925, stack(0x00007ff340ced000,0x00007ff340dee000)]\n\nStack: [0x00007ff340ced000,0x00007ff340dee000],  sp=0x00007ff340dec9a0,  free space=1022k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [libjvm.so+0xaaca9a]  VMError::report_and_die()+0x2ba\nV  [libjvm.so+0x4f333b]  report_vm_out_of_memory(char const*, int, unsigned long, VMErrorType, char const*)+0x8b\nV  [libjvm.so+0x90e8c3]  os::Linux::commit_memory_impl(char*, unsigned long, bool)+0x103\nV  [libjvm.so+0x90e98c]  os::pd_commit_memory(char*, unsigned long, bool)+0xc\nV  [libjvm.so+0x90772a]  os::commit_memory(char*, unsigned long, bool)+0x2a\nV  [libjvm.so+0x90c97f]  os::pd_create_stack_guard_pages(char*, unsigned long)+0x7f\nV  [libjvm.so+0xa52b4e]  JavaThread::create_stack_guard_pages()+0x5e\nV  [libjvm.so+0xa5c9b4]  JavaThread::run()+0x34\nV  [libjvm.so+0x910ee8]  java_start(Thread*)+0x108\nC  [libpthread.so.0+0x7dc5]  start_thread+0xc5\n{% endcodeblock %}\nCurrent Thread表示crash时程序所处的线程。\n**线程类别**: JavaThread，共有以下几种\n* JavaThread\n* VMThread（负责VM内的一些操作，包括GC）\n* CompilerThread\n* GCTaskThread\n* WatcherThread\n* ConcurrentMarkSweepThread\n\n**线程状态**：_thread_new\n\n线程状态 | 描述\n- | -\n _thread_uninitialized | 线程未被创建\n _thread_new | 线程创建但并未执行\n _thread_in_native | 线程正在运行native code\n _thread_in_vm | 执行VM的code\n _thread_in_java | 执行java的code\n _thread_blocked | 被block住的线程\n\n**原生堆栈信息（Native frames）**: 主要是一些jvm动态库的对战信息，是分析crash中比较重要的一个部分。\n{% codeblock %}\nJava Threads: ( => current thread )\n=>0x00007ff2d8001000 JavaThread \"flink-akka.remote.default-remote-dispatcher-15\" daemon [_thread_new, id=31925, stack(0x00007ff340ced000,0x00007ff340dee000)]\n  0x00007ff2ec053800 JavaThread \"Hashed wheel timer #1\" daemon [_thread_blocked, id=14219, stack(0x00007ff33bdfe000,0x00007ff33beff000)]\n  0x00007ff2dc130800 JavaThread \"New I/O server boss #6\" daemon [_thread_in_native, id=14218, stack(0x00007ff33beff000,0x00007ff33c000000)]\n  0x00007ff2dc119800 JavaThread \"New I/O worker #5\" daemon [_thread_in_native, id=14217, stack(0x00007ff3400e3000,0x00007ff3401e4000)]\n  0x00007ff2dc0b6000 JavaThread \"New I/O worker #4\" daemon [_thread_in_native, id=14216, stack(0x00007ff3401e4000,0x00007ff3402e5000)]\n  0x00007ff2dc0bb800 JavaThread \"New I/O boss #3\" daemon [_thread_in_native, id=14215, stack(0x00007ff3402e5000,0x00007ff3403e6000)]\n  0x00007ff2dc05c000 JavaThread \"New I/O worker #2\" daemon [_thread_in_native, id=14214, stack(0x00007ff3403e6000,0x00007ff3404e7000)]\n  0x00007ff2dc052000 JavaThread \"New I/O worker #1\" daemon [_thread_in_native, id=14213, stack(0x00007ff3404e7000,0x00007ff3405e8000)]\n  0x00007ff2c8009800 JavaThread \"flink-akka.remote.default-remote-dispatcher-7\" daemon [_thread_in_vm, id=14206, stack(0x00007ff3407e8000,0x00007ff3408e9000)]\n  0x00007ff2c800c000 JavaThread \"flink-akka.remote.default-remote-dispatcher-6\" daemon [_thread_in_native, id=14202, stack(0x00007ff3408e9000,0x00007ff3409ea000)]\n  0x00007ff2cc020000 JavaThread \"flink-akka.actor.default-dispatcher-5\" daemon [_thread_blocked, id=14147, stack(0x00007ff3409ea000,0x00007ff340aeb000)]\n  0x00007ff36222a800 JavaThread \"flink-akka.actor.default-dispatcher-4\" daemon [_thread_blocked, id=14136, stack(0x00007ff340aeb000,0x00007ff340bec000)]\n  0x00007ff362229000 JavaThread \"flink-akka.actor.default-dispatcher-3\" daemon [_thread_blocked, id=14135, stack(0x00007ff340bec000,0x00007ff340ced000)]\n  0x00007ff362183000 JavaThread \"flink-scheduler-1\" daemon [_thread_blocked, id=14044, stack(0x00007ff340fee000,0x00007ff3410ef000)]\n  0x00007ff3614b4000 JavaThread \"Timer for 'phoenix' metrics system\" daemon [_thread_blocked, id=14032, stack(0x00007ff342dfa000,0x00007ff342efb000)]\n  0x00007ff360fc1000 JavaThread \"main-EventThread\" daemon [_thread_blocked, id=14031, stack(0x00007ff3431fc000,0x00007ff3432fd000)]\n  0x00007ff360faf000 JavaThread \"main-SendThread(cnzk2:2181)\" daemon [_thread_in_native, id=14030, stack(0x00007ff3432fd000,0x00007ff3433fe000)]\n  0x00007ff360471000 JavaThread \"Thread-80\" daemon [_thread_blocked, id=14029, stack(0x00007ff3430fb000,0x00007ff3431fc000)]\n  0x00007ff3608a7000 JavaThread \"IPC Parameter Sending Thread #0\" daemon [_thread_blocked, id=13178, stack(0x00007ff3437fe000,0x00007ff3438ff000)]\n  0x00007ff3608a4000 JavaThread \"IPC Client (1508059488) connection to cnhm0/10.0.1.222:8032 from apps\" daemon [_thread_blocked, id=13177, stack(0x00007ff348923000,0x00007ff348a24000)]\n  0x00007ff3600df800 JavaThread \"Service Thread\" daemon [_thread_blocked, id=13172, stack(0x00007ff3498c5000,0x00007ff3499c6000)]\n  0x00007ff3600d2000 JavaThread \"C1 CompilerThread2\" daemon [_thread_in_native, id=13171, stack(0x00007ff3499c6000,0x00007ff349ac7000)]\n  0x00007ff3600d0000 JavaThread \"C2 CompilerThread1\" daemon [_thread_blocked, id=13170, stack(0x00007ff349ac7000,0x00007ff349bc8000)]\n  0x00007ff3600cd000 JavaThread \"C2 CompilerThread0\" daemon [_thread_blocked, id=13169, stack(0x00007ff349bc8000,0x00007ff349cc9000)]\n  0x00007ff3600cb000 JavaThread \"JDWP Event Helper Thread\" daemon [_thread_blocked, id=13168, stack(0x00007ff349cc9000,0x00007ff349dca000)]\n  0x00007ff3600c7000 JavaThread \"JDWP Transport Listener: dt_socket\" daemon [_thread_in_native, id=13167, stack(0x00007ff349dca000,0x00007ff349ecb000)]\n  0x00007ff3600b8000 JavaThread \"Signal Dispatcher\" daemon [_thread_blocked, id=13166, stack(0x00007ff34a0cf000,0x00007ff34a1d0000)]\n  0x00007ff36008c000 JavaThread \"Finalizer\" daemon [_thread_blocked, id=13165, stack(0x00007ff34a1d0000,0x00007ff34a2d1000)]\n  0x00007ff36008a000 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=13164, stack(0x00007ff34a2d1000,0x00007ff34a3d2000)]\n  0x00007ff360017000 JavaThread \"main\" [_thread_blocked, id=13158, stack(0x00007ff369c7a000,0x00007ff369d7b000)]\n\nOther Threads:\n  0x00007ff360085000 VMThread [stack: 0x00007ff34a3d2000,0x00007ff34a4d3000] [id=13163]\n  0x00007ff3600e2000 WatcherThread [stack: 0x00007ff3497c4000,0x00007ff3498c5000] [id=13173]\n{% endcodeblock %}\n这一部分是crash时Java代码中所有线程的状况。分析类似上一部分。\n{% codeblock %}\nVM state:not at safepoint (normal execution)\nVM Mutex/Monitor currently owned by a thread: None\n{% endcodeblock %}\n**VM状态**：\n\n状态 | 描述\n- | :-: |\nnot at a safepoint | 正常执行\nat safepoint | 所有VM内的线程被block住，在等待某一个VM操作完成\nsynchronizing | 一个特殊VM操作需要执行，VM在等待所有线程block\n\n{% codeblock %}\nHeap:\n PSYoungGen  total 39424K, used 31166K [0x0000000771a00000, 0x0000000774780000, 0x00000007c0000000)\n  eden space 38912K, 79% used [0x0000000771a00000,0x000000077384faf0,0x0000000774000000)\n  from space 512K, 25% used [0x0000000774680000,0x00000007746a0000,0x0000000774700000)\n  to   space 512K, 0% used [0x0000000774700000,0x0000000774700000,0x0000000774780000)\n ParOldGen   total 124928K, used 67043K [0x00000006d4e00000, 0x00000006dc800000, 0x0000000771a00000)\n  object space 124928K, 53% used [0x00000006d4e00000,0x00000006d8f78d18,0x00000006dc800000)\n Metaspace   used 54122K, capacity 54748K, committed 54912K, reserved 1097728K\n  class spaceused 6562K, capacity 6716K, committed 6784K, reserved 1048576K\n\nCard table byte_map: [0x00007ff3664db000,0x00007ff366c35000] byte_map_base: 0x00007ff362e34000\n\nMarking Bits: (ParMarkBitMap*) 0x00007ff3691426c0\n Begin Bits: [0x00007ff324a70000, 0x00007ff328538000)\n End Bits:   [0x00007ff328538000, 0x00007ff32c000000)\n\nPolling page: 0x00007ff369d84000\n\nCodeCache: size=245760Kb used=17958Kb max_used=18385Kb free=227801Kb\n bounds [0x00007ff34aad9000, 0x00007ff34bd29000, 0x00007ff359ad9000]\n total_blobs=6019 nmethods=5425 adapters=516\n compilation: enabled\n{% endcodeblock %}\n* Card Table是jvm维护的一种数据结构，用于记录更改对象时的引用，方便GC。\n* CodeCache是用来保存本地代码的，不属于PermGen。\n\n{% codeblock %}\nCompilation events (10 events):\nGC Heap History (10 events):\nDeoptimization events (10 events):\nInternal exceptions (10 events):\nEvents (10 events):\nDynamic libraries:\n{% endcodeblock %}\n\n这些都是表示crash时jvm最近的一些操作。举个例子说明：\n{% codeblock %}\nEvents (10 events):\nEvent: 2603309.010 Thread 0x00007ff2c800c000 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3409e88a8 mode 2\nEvent: 2603310.108 Thread 0x00007ff362229000 DEOPT PACKING pc=0x00007ff34b25ce6c sp=0x00007ff340ceb660\nEvent: 2603310.122 Thread 0x00007ff2c8009800 Uncommon trap: trap_request=0xffffff65 fr.pc=0x00007ff34b890e40\nEvent: 2603310.124 Thread 0x00007ff2c8009800 DEOPT PACKING pc=0x00007ff34b890e40 sp=0x00007ff3408e7790\nEvent: 2603310.124 Thread 0x00007ff2c8009800 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3408e7680 mode 2\nEvent: 2603310.125 Thread 0x00007ff2c8009800 Uncommon trap: trap_request=0xffffff65 fr.pc=0x00007ff34b850fe4\nEvent: 2603310.125 Thread 0x00007ff2c8009800 DEOPT PACKING pc=0x00007ff34b850fe4 sp=0x00007ff3408e7560\nEvent: 2603310.125 Thread 0x00007ff2c8009800 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff3408e72d8 mode 2\nEvent: 2603310.126 Thread 0x00007ff362229000 DEOPT UNPACKING pc=0x00007ff34aaddf69 sp=0x00007ff340ceb628 mode 2\nEvent: 2603310.935 Thread 0x00007ff2d8001000 Thread added: 0x00007ff2d8001000\n{% endcodeblock %}\n\n上述是最近10个runtime VM的事件，拿第一条举例，2603309.010是从VM启动后的时长，单位是秒，pc是program counter，sp是stack pointer。关于 DEOPT、Uncommon trap等的解释可以看这个[issue](https://stackoverflow.com/questions/49716694/what-are-events-in-hs-err-pid-log/49716888#49716888)，大概就是编译的时候，编译器做了一些优化，但是在runtime时发现这个优化没有用，所以叫去优化（deoptimization）。\n{% codeblock %}\n---------------  S Y S T E M  ---------------\n\nOS:Amazon Linux AMI release 2016.03\n\nuname:Linux 4.4.11-23.53.amzn1.x86_64 #1 SMP Wed Jun 1 22:22:50 UTC 2016 x86_64\nlibc:glibc 2.17 NPTL 2.17\nrlimit: STACK 8192k, CORE 0k, NPROC 65536, NOFILE 65536, AS infinity\nload average:10.84 2.76 1.17\n\n/proc/meminfo:\nMemTotal:   15403948 kB\nMemFree: 2637700 kB\nMemAvailable:2571132 kB\nBuffers: 304 kB\nCached:13784 kB\nSwapCached:0 kB\nActive: 12625320 kB\nInactive:   7684 kB\nActive(anon):   12619252 kB\nInactive(anon):  336 kB\nActive(file):   6068 kB\nInactive(file): 7348 kB\nUnevictable:   0 kB\nMlocked:   0 kB\nSwapTotal: 0 kB\nSwapFree:  0 kB\nDirty:16 kB\nWriteback:56 kB\nAnonPages:  12606968 kB\nMapped:10896 kB\nShmem:   356 kB\nSlab:  46004 kB\nSReclaimable:  22384 kB\nSUnreclaim:23620 kB\nKernelStack:9856 kB\nPageTables:38084 kB\nNFS_Unstable:  0 kB\nBounce:0 kB\nWritebackTmp:  0 kB\nCommitLimit: 7701972 kB\nCommitted_AS:   18337652 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:   0 kB\nVmallocChunk:  0 kB\nAnonHugePages: 0 kB\nHugePages_Total:   0\nHugePages_Free:0\nHugePages_Rsvd:0\nHugePages_Surp:0\nHugepagesize:   2048 kB\nDirectMap4k:   12288 kB\nDirectMap2M:15716352 kB\n{% endcodeblock %}\n系统内存情况：\n\n名词 | 描述 | 名词 | 描述 | 名词 | 描述\n- | :-: | :-: | :-: | :-: | :-\nMemToal | 总内存 | MemFree | 未使用内存 | MemAvailable | 可用内存\nBuffers | 文件读写Buffer | Cached | 缓存 | SwapCached | 缓存的交换空间\nActive | 最近被申请过的空间 | Inactive | 最近未被申请过的空间 | Active(anon) | ..\nInactive(anon) | .. | Active(file) | .. | Inactive(file) | ..\nUnevictable | .. | Unevictable | .. | Mlocked | ..\nSwapTotal | 可用交换空间 | SwapFree | 可用交换空间 | Dirty | 等待写入磁盘的空间\nWriteback | 正在被写入磁盘的空间 | AnonPages | .. | Mapped | ..\nShmem | .. | Slab | kernel使用 | Sreclaimable | ..\nSUnreclaim | .. | KernelStack | .. | PageTables | 内存页映射表空间\nNFS_Unstable | .. | Bounce | .. | WritebackTmp | ..\nCommitLimit | .. | Committed_AS | 完成workload最坏情况的内存使用情况 | VmallocTotal | ..\nVmallocUsed | 虚拟空间可映射的大小 | VmallocUsed | 已使用的虚拟空间映射大小 | VmallocChunk | 虚拟空间最大的虚拟空间块\nAnonHugePages | .. | HugePages_Total | .. | HugePages_Free | ..\nHugePages_Rsvd | .. | HugePages_Surp | .. | Hugepagesize | ..\nDirectMap4k | .. | DirectMap2M | ..\n\n\n\n","slug":"hs-err-pid-log","published":1,"updated":"2018-07-18T10:43:18.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjr2ad920009rguglt038yq0","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> There is insufficient memory <span class=\"keyword\">for</span> the Java Runtime Environment to <span class=\"built_in\">continue</span>.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Native memory allocation (mmap) failed to map 12288 bytes <span class=\"keyword\">for</span> committing reserved memory.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Possible reasons:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   The system is out of physical RAM or swap space</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   In 32 bit mode, the process size <span class=\"built_in\">limit</span> was hit</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Possible solutions:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Reduce memory load on the system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Increase physical memory or swap space</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Check <span class=\"keyword\">if</span> swap backing store is full</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Use 64 bit Java on a 64 bit OS</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease Java heap size (-Xmx/-Xms)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease number of Java threads</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease Java thread stack sizes (-Xss)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Set larger code cache with -XX:ReservedCodeCacheSize=</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This output file may be truncated or incomplete.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  Out of Memory Error (os_linux.cpp:2673), pid=13016, tid=140682742126336</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JRE version: Java(TM) SE Runtime Environment (8.0_40-b25) (build 1.8.0_40-b25)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Java VM: Java HotSpot(TM) 64-Bit Server VM (25.40-b25 mixed mode linux-amd64 compressed oops)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Failed to write core dump. Core dumps have been disabled. To <span class=\"built_in\">enable</span> core dumping, try <span class=\"string\">\"ulimit -c unlimited\"</span> before starting Java again</span></span><br></pre></td></tr></table></figure>\n<p>第一部分主要是程序crash的原因以及相关的solution。<br><figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\">Current thread (<span class=\"number\">0x00007ff2d8001000</span>):  JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-15\"</span> daemon [_thread_new, id=<span class=\"number\">31925</span>, stack(<span class=\"number\">0x00007ff340ced000</span>,<span class=\"number\">0x00007ff340dee000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Stack:</span> [<span class=\"number\">0x00007ff340ced000</span>,<span class=\"number\">0x00007ff340dee000</span>],  <span class=\"built_in\">sp</span>=<span class=\"number\">0x00007ff340dec9a0</span>,  free space=1022k</span><br><span class=\"line\">Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)</span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xaaca9a</span>]  VMError::report_and_die()+<span class=\"number\">0x2ba</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x4f333b</span>]  report_vm_out_of_memory(char const*, <span class=\"keyword\">int</span>, unsigned long, VMErrorType, char const*)+<span class=\"number\">0x8b</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90e8c3</span>]  os::Linux::commit_memory_impl(char*, unsigned long, bool)+<span class=\"number\">0x103</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90e98c</span>]  os::pd_commit_memory(char*, unsigned long, bool)+<span class=\"number\">0xc</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90772a</span>]  os::commit_memory(char*, unsigned long, bool)+<span class=\"number\">0x2a</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90c97f</span>]  os::pd_create_stack_guard_pages(char*, unsigned long)+<span class=\"number\">0x7f</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xa52b4e</span>]  JavaThread::create_stack_guard_pages()+<span class=\"number\">0x5e</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xa5c9b4</span>]  JavaThread::run()+<span class=\"number\">0x34</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x910ee8</span>]  java_start(Thread*)+<span class=\"number\">0x108</span></span><br><span class=\"line\">C  [libpthread.so<span class=\"meta\">.0</span>+<span class=\"number\">0x7dc5</span>]  start_thread+<span class=\"number\">0xc5</span></span><br></pre></td></tr></table></figure><br>Current Thread表示crash时程序所处的线程。<br><strong>线程类别</strong>: JavaThread，共有以下几种</p>\n<ul>\n<li>JavaThread</li>\n<li>VMThread（负责VM内的一些操作，包括GC）</li>\n<li>CompilerThread</li>\n<li>GCTaskThread</li>\n<li>WatcherThread</li>\n<li>ConcurrentMarkSweepThread</li>\n</ul>\n<p><strong>线程状态</strong>：_thread_new</p>\n<table>\n<thead>\n<tr>\n<th>线程状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> _thread_uninitialized</td>\n<td>线程未被创建</td>\n</tr>\n<tr>\n<td> _thread_new</td>\n<td>线程创建但并未执行</td>\n</tr>\n<tr>\n<td> _thread_in_native</td>\n<td>线程正在运行native code</td>\n</tr>\n<tr>\n<td> _thread_in_vm</td>\n<td>执行VM的code</td>\n</tr>\n<tr>\n<td> _thread_in_java</td>\n<td>执行java的code</td>\n</tr>\n<tr>\n<td> _thread_blocked</td>\n<td>被block住的线程</td>\n</tr>\n</tbody>\n</table>\n<p><strong>原生堆栈信息（Native frames）</strong>: 主要是一些jvm动态库的对战信息，是分析crash中比较重要的一个部分。<br><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java Threads: ( =&gt; current thread )</span><br><span class=\"line\">=&gt;<span class=\"number\">0x00007ff2d</span>8001000 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-15\"</span> daemon [_thread_new, id=<span class=\"number\">31925</span>, stack(<span class=\"number\">0x00007ff340ced</span>000,<span class=\"number\">0x00007ff340d</span>ee000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2ec053800 JavaThread <span class=\"string\">\"Hashed wheel timer #1\"</span> daemon [_thread_blocked, id=<span class=\"number\">14219</span>, stack(<span class=\"number\">0x00007ff33bdf</span>e000,<span class=\"number\">0x00007ff33beff</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c130800 JavaThread <span class=\"string\">\"New I/O server boss #6\"</span> daemon [_thread_in_native, id=<span class=\"number\">14218</span>, stack(<span class=\"number\">0x00007ff33beff</span>000,<span class=\"number\">0x00007ff</span>33c000000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c119800 JavaThread <span class=\"string\">\"New I/O worker #5\"</span> daemon [_thread_in_native, id=<span class=\"number\">14217</span>, stack(<span class=\"number\">0x00007ff</span>3400e3000,<span class=\"number\">0x00007ff</span>3401e4000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c0b6000 JavaThread <span class=\"string\">\"New I/O worker #4\"</span> daemon [_thread_in_native, id=<span class=\"number\">14216</span>, stack(<span class=\"number\">0x00007ff</span>3401e4000,<span class=\"number\">0x00007ff</span>3402e5000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c0bb800 JavaThread <span class=\"string\">\"New I/O boss #3\"</span> daemon [_thread_in_native, id=<span class=\"number\">14215</span>, stack(<span class=\"number\">0x00007ff</span>3402e5000,<span class=\"number\">0x00007ff</span>3403e6000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c05c000 JavaThread <span class=\"string\">\"New I/O worker #2\"</span> daemon [_thread_in_native, id=<span class=\"number\">14214</span>, stack(<span class=\"number\">0x00007ff</span>3403e6000,<span class=\"number\">0x00007ff</span>3404e7000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c052000 JavaThread <span class=\"string\">\"New I/O worker #1\"</span> daemon [_thread_in_native, id=<span class=\"number\">14213</span>, stack(<span class=\"number\">0x00007ff</span>3404e7000,<span class=\"number\">0x00007ff</span>3405e8000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2c8009800 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-7\"</span> daemon [_thread_in_vm, id=<span class=\"number\">14206</span>, stack(<span class=\"number\">0x00007ff</span>3407e8000,<span class=\"number\">0x00007ff</span>3408e9000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2c800c000 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-6\"</span> daemon [_thread_in_native, id=<span class=\"number\">14202</span>, stack(<span class=\"number\">0x00007ff</span>3408e9000,<span class=\"number\">0x00007ff</span>3409ea000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2cc020000 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-5\"</span> daemon [_thread_blocked, id=<span class=\"number\">14147</span>, stack(<span class=\"number\">0x00007ff</span>3409ea000,<span class=\"number\">0x00007ff</span>340aeb000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36222a800 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-4\"</span> daemon [_thread_blocked, id=<span class=\"number\">14136</span>, stack(<span class=\"number\">0x00007ff</span>340aeb000,<span class=\"number\">0x00007ff</span>340bec000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>362229000 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-3\"</span> daemon [_thread_blocked, id=<span class=\"number\">14135</span>, stack(<span class=\"number\">0x00007ff</span>340bec000,<span class=\"number\">0x00007ff340ced</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>362183000 JavaThread <span class=\"string\">\"flink-scheduler-1\"</span> daemon [_thread_blocked, id=<span class=\"number\">14044</span>, stack(<span class=\"number\">0x00007ff340f</span>ee000,<span class=\"number\">0x00007ff3410ef</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3614b4000 JavaThread <span class=\"string\">\"Timer for 'phoenix' metrics system\"</span> daemon [_thread_blocked, id=<span class=\"number\">14032</span>, stack(<span class=\"number\">0x00007ff342df</span>a000,<span class=\"number\">0x00007ff342ef</span>b000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff360f</span>c1000 JavaThread <span class=\"string\">\"main-EventThread\"</span> daemon [_thread_blocked, id=<span class=\"number\">14031</span>, stack(<span class=\"number\">0x00007ff3431f</span>c000,<span class=\"number\">0x00007ff3432fd</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff360faf</span>000 JavaThread <span class=\"string\">\"main-SendThread(cnzk2:2181)\"</span> daemon [_thread_in_native, id=<span class=\"number\">14030</span>, stack(<span class=\"number\">0x00007ff3432fd</span>000,<span class=\"number\">0x00007ff3433f</span>e000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360471000 JavaThread <span class=\"string\">\"Thread-80\"</span> daemon [_thread_blocked, id=<span class=\"number\">14029</span>, stack(<span class=\"number\">0x00007ff3430f</span>b000,<span class=\"number\">0x00007ff3431f</span>c000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3608a7000 JavaThread <span class=\"string\">\"IPC Parameter Sending Thread #0\"</span> daemon [_thread_blocked, id=<span class=\"number\">13178</span>, stack(<span class=\"number\">0x00007ff3437f</span>e000,<span class=\"number\">0x00007ff3438ff</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3608a4000 JavaThread <span class=\"string\">\"IPC Client (1508059488) connection to cnhm0/10.0.1.222:8032 from apps\"</span> daemon [_thread_blocked, id=<span class=\"number\">13177</span>, stack(<span class=\"number\">0x00007ff</span>348923000,<span class=\"number\">0x00007ff</span>348a24000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600df</span>800 JavaThread <span class=\"string\">\"Service Thread\"</span> daemon [_thread_blocked, id=<span class=\"number\">13172</span>, stack(<span class=\"number\">0x00007ff</span>3498c5000,<span class=\"number\">0x00007ff</span>3499c6000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600d</span>2000 JavaThread <span class=\"string\">\"C1 CompilerThread2\"</span> daemon [_thread_in_native, id=<span class=\"number\">13171</span>, stack(<span class=\"number\">0x00007ff</span>3499c6000,<span class=\"number\">0x00007ff</span>349ac7000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600d</span>0000 JavaThread <span class=\"string\">\"C2 CompilerThread1\"</span> daemon [_thread_blocked, id=<span class=\"number\">13170</span>, stack(<span class=\"number\">0x00007ff</span>349ac7000,<span class=\"number\">0x00007ff</span>349bc8000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600cd</span>000 JavaThread <span class=\"string\">\"C2 CompilerThread0\"</span> daemon [_thread_blocked, id=<span class=\"number\">13169</span>, stack(<span class=\"number\">0x00007ff</span>349bc8000,<span class=\"number\">0x00007ff</span>349cc9000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600cb000 JavaThread <span class=\"string\">\"JDWP Event Helper Thread\"</span> daemon [_thread_blocked, id=<span class=\"number\">13168</span>, stack(<span class=\"number\">0x00007ff</span>349cc9000,<span class=\"number\">0x00007ff349d</span>ca000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600c7000 JavaThread <span class=\"string\">\"JDWP Transport Listener: dt_socket\"</span> daemon [_thread_in_native, id=<span class=\"number\">13167</span>, stack(<span class=\"number\">0x00007ff349d</span>ca000,<span class=\"number\">0x00007ff</span>349ecb000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600b8000 JavaThread <span class=\"string\">\"Signal Dispatcher\"</span> daemon [_thread_blocked, id=<span class=\"number\">13166</span>, stack(<span class=\"number\">0x00007ff34a0cf</span>000,<span class=\"number\">0x00007ff34a1d</span>0000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36008c000 JavaThread <span class=\"string\">\"Finalizer\"</span> daemon [_thread_blocked, id=<span class=\"number\">13165</span>, stack(<span class=\"number\">0x00007ff34a1d</span>0000,<span class=\"number\">0x00007ff34a2d</span>1000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36008a000 JavaThread <span class=\"string\">\"Reference Handler\"</span> daemon [_thread_blocked, id=<span class=\"number\">13164</span>, stack(<span class=\"number\">0x00007ff34a2d</span>1000,<span class=\"number\">0x00007ff34a3d</span>2000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360017000 JavaThread <span class=\"string\">\"main\"</span> [_thread_blocked, id=<span class=\"number\">13158</span>, stack(<span class=\"number\">0x00007ff</span>369c7a000,<span class=\"number\">0x00007ff369d</span>7b000)]</span><br><span class=\"line\"></span><br><span class=\"line\">Other Threads:</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360085000 VMThread [stack: <span class=\"number\">0x00007ff34a3d</span>2000,<span class=\"number\">0x00007ff34a4d</span>3000] [id=<span class=\"number\">13163</span>]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600e2000 WatcherThread [stack: <span class=\"number\">0x00007ff</span>3497c4000,<span class=\"number\">0x00007ff</span>3498c5000] [id=<span class=\"number\">13173</span>]</span><br></pre></td></tr></table></figure><br>这一部分是crash时Java代码中所有线程的状况。分析类似上一部分。<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">VM state:<span class=\"keyword\">not</span> <span class=\"keyword\">at</span> safepoint (<span class=\"keyword\">normal</span> execution)</span><br><span class=\"line\">VM Mutex/Monitor currently owned <span class=\"keyword\">by</span> <span class=\"keyword\">a</span> thread: None</span><br></pre></td></tr></table></figure><br><strong>VM状态</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not at a safepoint</td>\n<td style=\"text-align:center\">正常执行</td>\n</tr>\n<tr>\n<td>at safepoint</td>\n<td style=\"text-align:center\">所有VM内的线程被block住，在等待某一个VM操作完成</td>\n</tr>\n<tr>\n<td>synchronizing</td>\n<td style=\"text-align:center\">一个特殊VM操作需要执行，VM在等待所有线程block</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Heap:</span></span><br><span class=\"line\"> PSYoungGen  total 39424K, used 31166K [<span class=\"number\">0x0000000771a00000</span>, <span class=\"number\">0x0000000774780000</span>, <span class=\"number\">0x00000007c0000000</span>)</span><br><span class=\"line\">  eden space 38912K, <span class=\"number\">79</span>% used [<span class=\"number\">0x0000000771a00000</span>,<span class=\"number\">0x000000077384faf0</span>,<span class=\"number\">0x0000000774000000</span>)</span><br><span class=\"line\">  from space 512K, <span class=\"number\">25</span>% used [<span class=\"number\">0x0000000774680000</span>,<span class=\"number\">0x00000007746a0000</span>,<span class=\"number\">0x0000000774700000</span>)</span><br><span class=\"line\">  to   space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x0000000774700000</span>,<span class=\"number\">0x0000000774700000</span>,<span class=\"number\">0x0000000774780000</span>)</span><br><span class=\"line\"> ParOldGen   total 124928K, used 67043K [<span class=\"number\">0x00000006d4e00000</span>, <span class=\"number\">0x00000006dc800000</span>, <span class=\"number\">0x0000000771a00000</span>)</span><br><span class=\"line\">  object space 124928K, <span class=\"number\">53</span>% used [<span class=\"number\">0x00000006d4e00000</span>,<span class=\"number\">0x00000006d8f78d18</span>,<span class=\"number\">0x00000006dc800000</span>)</span><br><span class=\"line\"> Metaspace   used 54122K, capacity 54748K, committed 54912K, reserved 1097728K</span><br><span class=\"line\">  class spaceused 6562K, capacity 6716K, committed 6784K, reserved 1048576K</span><br><span class=\"line\"></span><br><span class=\"line\">Card table byte_map: [<span class=\"number\">0x00007ff3664db000</span>,<span class=\"number\">0x00007ff366c35000</span>] byte_map_base: <span class=\"number\">0x00007ff362e34000</span></span><br><span class=\"line\"></span><br><span class=\"line\">Marking <span class=\"meta\">Bits</span>: (ParMarkBitMap*) <span class=\"number\">0x00007ff3691426c0</span></span><br><span class=\"line\"> Begin <span class=\"meta\">Bits</span>: [<span class=\"number\">0x00007ff324a70000</span>, <span class=\"number\">0x00007ff328538000</span>)</span><br><span class=\"line\"> End <span class=\"meta\">Bits</span>:   [<span class=\"number\">0x00007ff328538000</span>, <span class=\"number\">0x00007ff32c000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Polling page: <span class=\"number\">0x00007ff369d84000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">CodeCache:</span> size=245760Kb used=17958Kb max_used=18385Kb free=227801Kb</span><br><span class=\"line\"> bounds [<span class=\"number\">0x00007ff34aad9000</span>, <span class=\"number\">0x00007ff34bd29000</span>, <span class=\"number\">0x00007ff359ad9000</span>]</span><br><span class=\"line\"> total_blobs=<span class=\"number\">6019</span> nmethods=<span class=\"number\">5425</span> adapters=<span class=\"number\">516</span></span><br><span class=\"line\"><span class=\"symbol\"> compilation:</span> enabled</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Card Table是jvm维护的一种数据结构，用于记录更改对象时的引用，方便GC。</li>\n<li>CodeCache是用来保存本地代码的，不属于PermGen。</li>\n</ul>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compilation <span class=\"keyword\">events</span> (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">GC Heap History (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Deoptimization <span class=\"keyword\">events</span> (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Internal exceptions (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Events (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Dynamic libraries:</span><br></pre></td></tr></table></figure>\n<p>这些都是表示crash时jvm最近的一些操作。举个例子说明：<br><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">Events (10 events):</span><br><span class=\"line\">Event: 2603309.010 Thread 0x00007ff2c800c000 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3409e88a8 mode 2</span><br><span class=\"line\">Event: 2603310.108 Thread 0x00007ff362229000 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b25ce6c <span class=\"attribute\">sp</span>=0x00007ff340ceb660</span><br><span class=\"line\">Event: 2603310.122 Thread 0x00007ff2c8009800 Uncommon trap: <span class=\"attribute\">trap_request</span>=0xffffff65 fr.<span class=\"attribute\">pc</span>=0x00007ff34b890e40</span><br><span class=\"line\">Event: 2603310.124 Thread 0x00007ff2c8009800 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b890e40 <span class=\"attribute\">sp</span>=0x00007ff3408e7790</span><br><span class=\"line\">Event: 2603310.124 Thread 0x00007ff2c8009800 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3408e7680 mode 2</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 Uncommon trap: <span class=\"attribute\">trap_request</span>=0xffffff65 fr.<span class=\"attribute\">pc</span>=0x00007ff34b850fe4</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b850fe4 <span class=\"attribute\">sp</span>=0x00007ff3408e7560</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3408e72d8 mode 2</span><br><span class=\"line\">Event: 2603310.126 Thread 0x00007ff362229000 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff340ceb628 mode 2</span><br><span class=\"line\">Event: 2603310.935 Thread 0x00007ff2d8001000 Thread added: 0x00007ff2d8001000</span><br></pre></td></tr></table></figure></p>\n<p>上述是最近10个runtime VM的事件，拿第一条举例，2603309.010是从VM启动后的时长，单位是秒，pc是program counter，sp是stack pointer。关于 DEOPT、Uncommon trap等的解释可以看这个<a href=\"https://stackoverflow.com/questions/49716694/what-are-events-in-hs-err-pid-log/49716888#49716888\" target=\"_blank\" rel=\"noopener\">issue</a>，大概就是编译的时候，编译器做了一些优化，但是在runtime时发现这个优化没有用，所以叫去优化（deoptimization）。<br><figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------  S Y S T E M  ---------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">OS:Amazon Linux AMI release 2016.03</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">uname:Linux 4.4.11-23.53.amzn1.x86_64 #1 SMP Wed Jun 1 22:22:50 UTC 2016 x86_64</span></span><br><span class=\"line\"><span class=\"section\">libc:glibc 2.17 NPTL 2.17</span></span><br><span class=\"line\"><span class=\"section\">rlimit: STACK 8192k, CORE 0k, NPROC 65536, NOFILE 65536, AS infinity</span></span><br><span class=\"line\">load average:10.84 2.76 1.17</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">/proc/meminfo:</span></span><br><span class=\"line\"><span class=\"section\">MemTotal:   15403948 kB</span></span><br><span class=\"line\"><span class=\"section\">MemFree: 2637700 kB</span></span><br><span class=\"line\"><span class=\"section\">MemAvailable:2571132 kB</span></span><br><span class=\"line\"><span class=\"section\">Buffers: 304 kB</span></span><br><span class=\"line\"><span class=\"section\">Cached:13784 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapCached:0 kB</span></span><br><span class=\"line\"><span class=\"section\">Active: 12625320 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive:   7684 kB</span></span><br><span class=\"line\"><span class=\"section\">Active(anon):   12619252 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive(anon):  336 kB</span></span><br><span class=\"line\"><span class=\"section\">Active(file):   6068 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive(file): 7348 kB</span></span><br><span class=\"line\"><span class=\"section\">Unevictable:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">Mlocked:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapTotal: 0 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapFree:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">Dirty:16 kB</span></span><br><span class=\"line\"><span class=\"section\">Writeback:56 kB</span></span><br><span class=\"line\"><span class=\"section\">AnonPages:  12606968 kB</span></span><br><span class=\"line\"><span class=\"section\">Mapped:10896 kB</span></span><br><span class=\"line\"><span class=\"section\">Shmem:   356 kB</span></span><br><span class=\"line\"><span class=\"section\">Slab:  46004 kB</span></span><br><span class=\"line\"><span class=\"section\">SReclaimable:  22384 kB</span></span><br><span class=\"line\"><span class=\"section\">SUnreclaim:23620 kB</span></span><br><span class=\"line\"><span class=\"section\">KernelStack:9856 kB</span></span><br><span class=\"line\"><span class=\"section\">PageTables:38084 kB</span></span><br><span class=\"line\"><span class=\"section\">NFS_Unstable:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">Bounce:0 kB</span></span><br><span class=\"line\"><span class=\"section\">WritebackTmp:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">CommitLimit: 7701972 kB</span></span><br><span class=\"line\"><span class=\"section\">Committed_AS:   18337652 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocTotal:   34359738367 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocUsed:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocChunk:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">AnonHugePages: 0 kB</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Total:   0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Free:0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Rsvd:0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Surp:0</span></span><br><span class=\"line\"><span class=\"section\">Hugepagesize:   2048 kB</span></span><br><span class=\"line\"><span class=\"section\">DirectMap4k:   12288 kB</span></span><br><span class=\"line\"><span class=\"section\">DirectMap2M:15716352 kB</span></span><br></pre></td></tr></table></figure><br>系统内存情况：</p>\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MemToal</td>\n<td style=\"text-align:center\">总内存</td>\n<td style=\"text-align:center\">MemFree</td>\n<td style=\"text-align:center\">未使用内存</td>\n<td style=\"text-align:center\">MemAvailable</td>\n<td style=\"text-align:left\">可用内存</td>\n</tr>\n<tr>\n<td>Buffers</td>\n<td style=\"text-align:center\">文件读写Buffer</td>\n<td style=\"text-align:center\">Cached</td>\n<td style=\"text-align:center\">缓存</td>\n<td style=\"text-align:center\">SwapCached</td>\n<td style=\"text-align:left\">缓存的交换空间</td>\n</tr>\n<tr>\n<td>Active</td>\n<td style=\"text-align:center\">最近被申请过的空间</td>\n<td style=\"text-align:center\">Inactive</td>\n<td style=\"text-align:center\">最近未被申请过的空间</td>\n<td style=\"text-align:center\">Active(anon)</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Inactive(anon)</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Active(file)</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Inactive(file)</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Unevictable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Unevictable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Mlocked</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>SwapTotal</td>\n<td style=\"text-align:center\">可用交换空间</td>\n<td style=\"text-align:center\">SwapFree</td>\n<td style=\"text-align:center\">可用交换空间</td>\n<td style=\"text-align:center\">Dirty</td>\n<td style=\"text-align:left\">等待写入磁盘的空间</td>\n</tr>\n<tr>\n<td>Writeback</td>\n<td style=\"text-align:center\">正在被写入磁盘的空间</td>\n<td style=\"text-align:center\">AnonPages</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Mapped</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Shmem</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Slab</td>\n<td style=\"text-align:center\">kernel使用</td>\n<td style=\"text-align:center\">Sreclaimable</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>SUnreclaim</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">KernelStack</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">PageTables</td>\n<td style=\"text-align:left\">内存页映射表空间</td>\n</tr>\n<tr>\n<td>NFS_Unstable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Bounce</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">WritebackTmp</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>CommitLimit</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Committed_AS</td>\n<td style=\"text-align:center\">完成workload最坏情况的内存使用情况</td>\n<td style=\"text-align:center\">VmallocTotal</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>VmallocUsed</td>\n<td style=\"text-align:center\">虚拟空间可映射的大小</td>\n<td style=\"text-align:center\">VmallocUsed</td>\n<td style=\"text-align:center\">已使用的虚拟空间映射大小</td>\n<td style=\"text-align:center\">VmallocChunk</td>\n<td style=\"text-align:left\">虚拟空间最大的虚拟空间块</td>\n</tr>\n<tr>\n<td>AnonHugePages</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Total</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Free</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>HugePages_Rsvd</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Surp</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Hugepagesize</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>DirectMap4k</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">DirectMap2M</td>\n<td style=\"text-align:center\">..</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> There is insufficient memory <span class=\"keyword\">for</span> the Java Runtime Environment to <span class=\"built_in\">continue</span>.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Native memory allocation (mmap) failed to map 12288 bytes <span class=\"keyword\">for</span> committing reserved memory.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Possible reasons:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   The system is out of physical RAM or swap space</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   In 32 bit mode, the process size <span class=\"built_in\">limit</span> was hit</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Possible solutions:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Reduce memory load on the system</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Increase physical memory or swap space</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Check <span class=\"keyword\">if</span> swap backing store is full</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Use 64 bit Java on a 64 bit OS</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease Java heap size (-Xmx/-Xms)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease number of Java threads</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Decrease Java thread stack sizes (-Xss)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   Set larger code cache with -XX:ReservedCodeCacheSize=</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This output file may be truncated or incomplete.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  Out of Memory Error (os_linux.cpp:2673), pid=13016, tid=140682742126336</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> JRE version: Java(TM) SE Runtime Environment (8.0_40-b25) (build 1.8.0_40-b25)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Java VM: Java HotSpot(TM) 64-Bit Server VM (25.40-b25 mixed mode linux-amd64 compressed oops)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Failed to write core dump. Core dumps have been disabled. To <span class=\"built_in\">enable</span> core dumping, try <span class=\"string\">\"ulimit -c unlimited\"</span> before starting Java again</span></span><br></pre></td></tr></table></figure>\n<p>第一部分主要是程序crash的原因以及相关的solution。<br><figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\">Current thread (<span class=\"number\">0x00007ff2d8001000</span>):  JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-15\"</span> daemon [_thread_new, id=<span class=\"number\">31925</span>, stack(<span class=\"number\">0x00007ff340ced000</span>,<span class=\"number\">0x00007ff340dee000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Stack:</span> [<span class=\"number\">0x00007ff340ced000</span>,<span class=\"number\">0x00007ff340dee000</span>],  <span class=\"built_in\">sp</span>=<span class=\"number\">0x00007ff340dec9a0</span>,  free space=1022k</span><br><span class=\"line\">Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)</span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xaaca9a</span>]  VMError::report_and_die()+<span class=\"number\">0x2ba</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x4f333b</span>]  report_vm_out_of_memory(char const*, <span class=\"keyword\">int</span>, unsigned long, VMErrorType, char const*)+<span class=\"number\">0x8b</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90e8c3</span>]  os::Linux::commit_memory_impl(char*, unsigned long, bool)+<span class=\"number\">0x103</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90e98c</span>]  os::pd_commit_memory(char*, unsigned long, bool)+<span class=\"number\">0xc</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90772a</span>]  os::commit_memory(char*, unsigned long, bool)+<span class=\"number\">0x2a</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x90c97f</span>]  os::pd_create_stack_guard_pages(char*, unsigned long)+<span class=\"number\">0x7f</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xa52b4e</span>]  JavaThread::create_stack_guard_pages()+<span class=\"number\">0x5e</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0xa5c9b4</span>]  JavaThread::run()+<span class=\"number\">0x34</span></span><br><span class=\"line\">V  [libjvm.so+<span class=\"number\">0x910ee8</span>]  java_start(Thread*)+<span class=\"number\">0x108</span></span><br><span class=\"line\">C  [libpthread.so<span class=\"meta\">.0</span>+<span class=\"number\">0x7dc5</span>]  start_thread+<span class=\"number\">0xc5</span></span><br></pre></td></tr></table></figure><br>Current Thread表示crash时程序所处的线程。<br><strong>线程类别</strong>: JavaThread，共有以下几种</p>\n<ul>\n<li>JavaThread</li>\n<li>VMThread（负责VM内的一些操作，包括GC）</li>\n<li>CompilerThread</li>\n<li>GCTaskThread</li>\n<li>WatcherThread</li>\n<li>ConcurrentMarkSweepThread</li>\n</ul>\n<p><strong>线程状态</strong>：_thread_new</p>\n<table>\n<thead>\n<tr>\n<th>线程状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> _thread_uninitialized</td>\n<td>线程未被创建</td>\n</tr>\n<tr>\n<td> _thread_new</td>\n<td>线程创建但并未执行</td>\n</tr>\n<tr>\n<td> _thread_in_native</td>\n<td>线程正在运行native code</td>\n</tr>\n<tr>\n<td> _thread_in_vm</td>\n<td>执行VM的code</td>\n</tr>\n<tr>\n<td> _thread_in_java</td>\n<td>执行java的code</td>\n</tr>\n<tr>\n<td> _thread_blocked</td>\n<td>被block住的线程</td>\n</tr>\n</tbody>\n</table>\n<p><strong>原生堆栈信息（Native frames）</strong>: 主要是一些jvm动态库的对战信息，是分析crash中比较重要的一个部分。<br><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java Threads: ( =&gt; current thread )</span><br><span class=\"line\">=&gt;<span class=\"number\">0x00007ff2d</span>8001000 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-15\"</span> daemon [_thread_new, id=<span class=\"number\">31925</span>, stack(<span class=\"number\">0x00007ff340ced</span>000,<span class=\"number\">0x00007ff340d</span>ee000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2ec053800 JavaThread <span class=\"string\">\"Hashed wheel timer #1\"</span> daemon [_thread_blocked, id=<span class=\"number\">14219</span>, stack(<span class=\"number\">0x00007ff33bdf</span>e000,<span class=\"number\">0x00007ff33beff</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c130800 JavaThread <span class=\"string\">\"New I/O server boss #6\"</span> daemon [_thread_in_native, id=<span class=\"number\">14218</span>, stack(<span class=\"number\">0x00007ff33beff</span>000,<span class=\"number\">0x00007ff</span>33c000000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c119800 JavaThread <span class=\"string\">\"New I/O worker #5\"</span> daemon [_thread_in_native, id=<span class=\"number\">14217</span>, stack(<span class=\"number\">0x00007ff</span>3400e3000,<span class=\"number\">0x00007ff</span>3401e4000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c0b6000 JavaThread <span class=\"string\">\"New I/O worker #4\"</span> daemon [_thread_in_native, id=<span class=\"number\">14216</span>, stack(<span class=\"number\">0x00007ff</span>3401e4000,<span class=\"number\">0x00007ff</span>3402e5000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c0bb800 JavaThread <span class=\"string\">\"New I/O boss #3\"</span> daemon [_thread_in_native, id=<span class=\"number\">14215</span>, stack(<span class=\"number\">0x00007ff</span>3402e5000,<span class=\"number\">0x00007ff</span>3403e6000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c05c000 JavaThread <span class=\"string\">\"New I/O worker #2\"</span> daemon [_thread_in_native, id=<span class=\"number\">14214</span>, stack(<span class=\"number\">0x00007ff</span>3403e6000,<span class=\"number\">0x00007ff</span>3404e7000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff2d</span>c052000 JavaThread <span class=\"string\">\"New I/O worker #1\"</span> daemon [_thread_in_native, id=<span class=\"number\">14213</span>, stack(<span class=\"number\">0x00007ff</span>3404e7000,<span class=\"number\">0x00007ff</span>3405e8000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2c8009800 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-7\"</span> daemon [_thread_in_vm, id=<span class=\"number\">14206</span>, stack(<span class=\"number\">0x00007ff</span>3407e8000,<span class=\"number\">0x00007ff</span>3408e9000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2c800c000 JavaThread <span class=\"string\">\"flink-akka.remote.default-remote-dispatcher-6\"</span> daemon [_thread_in_native, id=<span class=\"number\">14202</span>, stack(<span class=\"number\">0x00007ff</span>3408e9000,<span class=\"number\">0x00007ff</span>3409ea000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>2cc020000 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-5\"</span> daemon [_thread_blocked, id=<span class=\"number\">14147</span>, stack(<span class=\"number\">0x00007ff</span>3409ea000,<span class=\"number\">0x00007ff</span>340aeb000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36222a800 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-4\"</span> daemon [_thread_blocked, id=<span class=\"number\">14136</span>, stack(<span class=\"number\">0x00007ff</span>340aeb000,<span class=\"number\">0x00007ff</span>340bec000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>362229000 JavaThread <span class=\"string\">\"flink-akka.actor.default-dispatcher-3\"</span> daemon [_thread_blocked, id=<span class=\"number\">14135</span>, stack(<span class=\"number\">0x00007ff</span>340bec000,<span class=\"number\">0x00007ff340ced</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>362183000 JavaThread <span class=\"string\">\"flink-scheduler-1\"</span> daemon [_thread_blocked, id=<span class=\"number\">14044</span>, stack(<span class=\"number\">0x00007ff340f</span>ee000,<span class=\"number\">0x00007ff3410ef</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3614b4000 JavaThread <span class=\"string\">\"Timer for 'phoenix' metrics system\"</span> daemon [_thread_blocked, id=<span class=\"number\">14032</span>, stack(<span class=\"number\">0x00007ff342df</span>a000,<span class=\"number\">0x00007ff342ef</span>b000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff360f</span>c1000 JavaThread <span class=\"string\">\"main-EventThread\"</span> daemon [_thread_blocked, id=<span class=\"number\">14031</span>, stack(<span class=\"number\">0x00007ff3431f</span>c000,<span class=\"number\">0x00007ff3432fd</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff360faf</span>000 JavaThread <span class=\"string\">\"main-SendThread(cnzk2:2181)\"</span> daemon [_thread_in_native, id=<span class=\"number\">14030</span>, stack(<span class=\"number\">0x00007ff3432fd</span>000,<span class=\"number\">0x00007ff3433f</span>e000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360471000 JavaThread <span class=\"string\">\"Thread-80\"</span> daemon [_thread_blocked, id=<span class=\"number\">14029</span>, stack(<span class=\"number\">0x00007ff3430f</span>b000,<span class=\"number\">0x00007ff3431f</span>c000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3608a7000 JavaThread <span class=\"string\">\"IPC Parameter Sending Thread #0\"</span> daemon [_thread_blocked, id=<span class=\"number\">13178</span>, stack(<span class=\"number\">0x00007ff3437f</span>e000,<span class=\"number\">0x00007ff3438ff</span>000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3608a4000 JavaThread <span class=\"string\">\"IPC Client (1508059488) connection to cnhm0/10.0.1.222:8032 from apps\"</span> daemon [_thread_blocked, id=<span class=\"number\">13177</span>, stack(<span class=\"number\">0x00007ff</span>348923000,<span class=\"number\">0x00007ff</span>348a24000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600df</span>800 JavaThread <span class=\"string\">\"Service Thread\"</span> daemon [_thread_blocked, id=<span class=\"number\">13172</span>, stack(<span class=\"number\">0x00007ff</span>3498c5000,<span class=\"number\">0x00007ff</span>3499c6000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600d</span>2000 JavaThread <span class=\"string\">\"C1 CompilerThread2\"</span> daemon [_thread_in_native, id=<span class=\"number\">13171</span>, stack(<span class=\"number\">0x00007ff</span>3499c6000,<span class=\"number\">0x00007ff</span>349ac7000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600d</span>0000 JavaThread <span class=\"string\">\"C2 CompilerThread1\"</span> daemon [_thread_blocked, id=<span class=\"number\">13170</span>, stack(<span class=\"number\">0x00007ff</span>349ac7000,<span class=\"number\">0x00007ff</span>349bc8000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff3600cd</span>000 JavaThread <span class=\"string\">\"C2 CompilerThread0\"</span> daemon [_thread_blocked, id=<span class=\"number\">13169</span>, stack(<span class=\"number\">0x00007ff</span>349bc8000,<span class=\"number\">0x00007ff</span>349cc9000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600cb000 JavaThread <span class=\"string\">\"JDWP Event Helper Thread\"</span> daemon [_thread_blocked, id=<span class=\"number\">13168</span>, stack(<span class=\"number\">0x00007ff</span>349cc9000,<span class=\"number\">0x00007ff349d</span>ca000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600c7000 JavaThread <span class=\"string\">\"JDWP Transport Listener: dt_socket\"</span> daemon [_thread_in_native, id=<span class=\"number\">13167</span>, stack(<span class=\"number\">0x00007ff349d</span>ca000,<span class=\"number\">0x00007ff</span>349ecb000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600b8000 JavaThread <span class=\"string\">\"Signal Dispatcher\"</span> daemon [_thread_blocked, id=<span class=\"number\">13166</span>, stack(<span class=\"number\">0x00007ff34a0cf</span>000,<span class=\"number\">0x00007ff34a1d</span>0000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36008c000 JavaThread <span class=\"string\">\"Finalizer\"</span> daemon [_thread_blocked, id=<span class=\"number\">13165</span>, stack(<span class=\"number\">0x00007ff34a1d</span>0000,<span class=\"number\">0x00007ff34a2d</span>1000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>36008a000 JavaThread <span class=\"string\">\"Reference Handler\"</span> daemon [_thread_blocked, id=<span class=\"number\">13164</span>, stack(<span class=\"number\">0x00007ff34a2d</span>1000,<span class=\"number\">0x00007ff34a3d</span>2000)]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360017000 JavaThread <span class=\"string\">\"main\"</span> [_thread_blocked, id=<span class=\"number\">13158</span>, stack(<span class=\"number\">0x00007ff</span>369c7a000,<span class=\"number\">0x00007ff369d</span>7b000)]</span><br><span class=\"line\"></span><br><span class=\"line\">Other Threads:</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>360085000 VMThread [stack: <span class=\"number\">0x00007ff34a3d</span>2000,<span class=\"number\">0x00007ff34a4d</span>3000] [id=<span class=\"number\">13163</span>]</span><br><span class=\"line\">  <span class=\"number\">0x00007ff</span>3600e2000 WatcherThread [stack: <span class=\"number\">0x00007ff</span>3497c4000,<span class=\"number\">0x00007ff</span>3498c5000] [id=<span class=\"number\">13173</span>]</span><br></pre></td></tr></table></figure><br>这一部分是crash时Java代码中所有线程的状况。分析类似上一部分。<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">VM state:<span class=\"keyword\">not</span> <span class=\"keyword\">at</span> safepoint (<span class=\"keyword\">normal</span> execution)</span><br><span class=\"line\">VM Mutex/Monitor currently owned <span class=\"keyword\">by</span> <span class=\"keyword\">a</span> thread: None</span><br></pre></td></tr></table></figure><br><strong>VM状态</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not at a safepoint</td>\n<td style=\"text-align:center\">正常执行</td>\n</tr>\n<tr>\n<td>at safepoint</td>\n<td style=\"text-align:center\">所有VM内的线程被block住，在等待某一个VM操作完成</td>\n</tr>\n<tr>\n<td>synchronizing</td>\n<td style=\"text-align:center\">一个特殊VM操作需要执行，VM在等待所有线程block</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Heap:</span></span><br><span class=\"line\"> PSYoungGen  total 39424K, used 31166K [<span class=\"number\">0x0000000771a00000</span>, <span class=\"number\">0x0000000774780000</span>, <span class=\"number\">0x00000007c0000000</span>)</span><br><span class=\"line\">  eden space 38912K, <span class=\"number\">79</span>% used [<span class=\"number\">0x0000000771a00000</span>,<span class=\"number\">0x000000077384faf0</span>,<span class=\"number\">0x0000000774000000</span>)</span><br><span class=\"line\">  from space 512K, <span class=\"number\">25</span>% used [<span class=\"number\">0x0000000774680000</span>,<span class=\"number\">0x00000007746a0000</span>,<span class=\"number\">0x0000000774700000</span>)</span><br><span class=\"line\">  to   space 512K, <span class=\"number\">0</span>% used [<span class=\"number\">0x0000000774700000</span>,<span class=\"number\">0x0000000774700000</span>,<span class=\"number\">0x0000000774780000</span>)</span><br><span class=\"line\"> ParOldGen   total 124928K, used 67043K [<span class=\"number\">0x00000006d4e00000</span>, <span class=\"number\">0x00000006dc800000</span>, <span class=\"number\">0x0000000771a00000</span>)</span><br><span class=\"line\">  object space 124928K, <span class=\"number\">53</span>% used [<span class=\"number\">0x00000006d4e00000</span>,<span class=\"number\">0x00000006d8f78d18</span>,<span class=\"number\">0x00000006dc800000</span>)</span><br><span class=\"line\"> Metaspace   used 54122K, capacity 54748K, committed 54912K, reserved 1097728K</span><br><span class=\"line\">  class spaceused 6562K, capacity 6716K, committed 6784K, reserved 1048576K</span><br><span class=\"line\"></span><br><span class=\"line\">Card table byte_map: [<span class=\"number\">0x00007ff3664db000</span>,<span class=\"number\">0x00007ff366c35000</span>] byte_map_base: <span class=\"number\">0x00007ff362e34000</span></span><br><span class=\"line\"></span><br><span class=\"line\">Marking <span class=\"meta\">Bits</span>: (ParMarkBitMap*) <span class=\"number\">0x00007ff3691426c0</span></span><br><span class=\"line\"> Begin <span class=\"meta\">Bits</span>: [<span class=\"number\">0x00007ff324a70000</span>, <span class=\"number\">0x00007ff328538000</span>)</span><br><span class=\"line\"> End <span class=\"meta\">Bits</span>:   [<span class=\"number\">0x00007ff328538000</span>, <span class=\"number\">0x00007ff32c000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Polling page: <span class=\"number\">0x00007ff369d84000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">CodeCache:</span> size=245760Kb used=17958Kb max_used=18385Kb free=227801Kb</span><br><span class=\"line\"> bounds [<span class=\"number\">0x00007ff34aad9000</span>, <span class=\"number\">0x00007ff34bd29000</span>, <span class=\"number\">0x00007ff359ad9000</span>]</span><br><span class=\"line\"> total_blobs=<span class=\"number\">6019</span> nmethods=<span class=\"number\">5425</span> adapters=<span class=\"number\">516</span></span><br><span class=\"line\"><span class=\"symbol\"> compilation:</span> enabled</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Card Table是jvm维护的一种数据结构，用于记录更改对象时的引用，方便GC。</li>\n<li>CodeCache是用来保存本地代码的，不属于PermGen。</li>\n</ul>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Compilation <span class=\"keyword\">events</span> (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">GC Heap History (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Deoptimization <span class=\"keyword\">events</span> (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Internal exceptions (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Events (<span class=\"number\">10</span> <span class=\"keyword\">events</span>):</span><br><span class=\"line\">Dynamic libraries:</span><br></pre></td></tr></table></figure>\n<p>这些都是表示crash时jvm最近的一些操作。举个例子说明：<br><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">Events (10 events):</span><br><span class=\"line\">Event: 2603309.010 Thread 0x00007ff2c800c000 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3409e88a8 mode 2</span><br><span class=\"line\">Event: 2603310.108 Thread 0x00007ff362229000 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b25ce6c <span class=\"attribute\">sp</span>=0x00007ff340ceb660</span><br><span class=\"line\">Event: 2603310.122 Thread 0x00007ff2c8009800 Uncommon trap: <span class=\"attribute\">trap_request</span>=0xffffff65 fr.<span class=\"attribute\">pc</span>=0x00007ff34b890e40</span><br><span class=\"line\">Event: 2603310.124 Thread 0x00007ff2c8009800 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b890e40 <span class=\"attribute\">sp</span>=0x00007ff3408e7790</span><br><span class=\"line\">Event: 2603310.124 Thread 0x00007ff2c8009800 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3408e7680 mode 2</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 Uncommon trap: <span class=\"attribute\">trap_request</span>=0xffffff65 fr.<span class=\"attribute\">pc</span>=0x00007ff34b850fe4</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 DEOPT PACKING <span class=\"attribute\">pc</span>=0x00007ff34b850fe4 <span class=\"attribute\">sp</span>=0x00007ff3408e7560</span><br><span class=\"line\">Event: 2603310.125 Thread 0x00007ff2c8009800 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff3408e72d8 mode 2</span><br><span class=\"line\">Event: 2603310.126 Thread 0x00007ff362229000 DEOPT UNPACKING <span class=\"attribute\">pc</span>=0x00007ff34aaddf69 <span class=\"attribute\">sp</span>=0x00007ff340ceb628 mode 2</span><br><span class=\"line\">Event: 2603310.935 Thread 0x00007ff2d8001000 Thread added: 0x00007ff2d8001000</span><br></pre></td></tr></table></figure></p>\n<p>上述是最近10个runtime VM的事件，拿第一条举例，2603309.010是从VM启动后的时长，单位是秒，pc是program counter，sp是stack pointer。关于 DEOPT、Uncommon trap等的解释可以看这个<a href=\"https://stackoverflow.com/questions/49716694/what-are-events-in-hs-err-pid-log/49716888#49716888\" target=\"_blank\" rel=\"noopener\">issue</a>，大概就是编译的时候，编译器做了一些优化，但是在runtime时发现这个优化没有用，所以叫去优化（deoptimization）。<br><figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------  S Y S T E M  ---------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">OS:Amazon Linux AMI release 2016.03</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">uname:Linux 4.4.11-23.53.amzn1.x86_64 #1 SMP Wed Jun 1 22:22:50 UTC 2016 x86_64</span></span><br><span class=\"line\"><span class=\"section\">libc:glibc 2.17 NPTL 2.17</span></span><br><span class=\"line\"><span class=\"section\">rlimit: STACK 8192k, CORE 0k, NPROC 65536, NOFILE 65536, AS infinity</span></span><br><span class=\"line\">load average:10.84 2.76 1.17</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">/proc/meminfo:</span></span><br><span class=\"line\"><span class=\"section\">MemTotal:   15403948 kB</span></span><br><span class=\"line\"><span class=\"section\">MemFree: 2637700 kB</span></span><br><span class=\"line\"><span class=\"section\">MemAvailable:2571132 kB</span></span><br><span class=\"line\"><span class=\"section\">Buffers: 304 kB</span></span><br><span class=\"line\"><span class=\"section\">Cached:13784 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapCached:0 kB</span></span><br><span class=\"line\"><span class=\"section\">Active: 12625320 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive:   7684 kB</span></span><br><span class=\"line\"><span class=\"section\">Active(anon):   12619252 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive(anon):  336 kB</span></span><br><span class=\"line\"><span class=\"section\">Active(file):   6068 kB</span></span><br><span class=\"line\"><span class=\"section\">Inactive(file): 7348 kB</span></span><br><span class=\"line\"><span class=\"section\">Unevictable:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">Mlocked:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapTotal: 0 kB</span></span><br><span class=\"line\"><span class=\"section\">SwapFree:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">Dirty:16 kB</span></span><br><span class=\"line\"><span class=\"section\">Writeback:56 kB</span></span><br><span class=\"line\"><span class=\"section\">AnonPages:  12606968 kB</span></span><br><span class=\"line\"><span class=\"section\">Mapped:10896 kB</span></span><br><span class=\"line\"><span class=\"section\">Shmem:   356 kB</span></span><br><span class=\"line\"><span class=\"section\">Slab:  46004 kB</span></span><br><span class=\"line\"><span class=\"section\">SReclaimable:  22384 kB</span></span><br><span class=\"line\"><span class=\"section\">SUnreclaim:23620 kB</span></span><br><span class=\"line\"><span class=\"section\">KernelStack:9856 kB</span></span><br><span class=\"line\"><span class=\"section\">PageTables:38084 kB</span></span><br><span class=\"line\"><span class=\"section\">NFS_Unstable:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">Bounce:0 kB</span></span><br><span class=\"line\"><span class=\"section\">WritebackTmp:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">CommitLimit: 7701972 kB</span></span><br><span class=\"line\"><span class=\"section\">Committed_AS:   18337652 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocTotal:   34359738367 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocUsed:   0 kB</span></span><br><span class=\"line\"><span class=\"section\">VmallocChunk:  0 kB</span></span><br><span class=\"line\"><span class=\"section\">AnonHugePages: 0 kB</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Total:   0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Free:0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Rsvd:0</span></span><br><span class=\"line\"><span class=\"section\">HugePages_Surp:0</span></span><br><span class=\"line\"><span class=\"section\">Hugepagesize:   2048 kB</span></span><br><span class=\"line\"><span class=\"section\">DirectMap4k:   12288 kB</span></span><br><span class=\"line\"><span class=\"section\">DirectMap2M:15716352 kB</span></span><br></pre></td></tr></table></figure><br>系统内存情况：</p>\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MemToal</td>\n<td style=\"text-align:center\">总内存</td>\n<td style=\"text-align:center\">MemFree</td>\n<td style=\"text-align:center\">未使用内存</td>\n<td style=\"text-align:center\">MemAvailable</td>\n<td style=\"text-align:left\">可用内存</td>\n</tr>\n<tr>\n<td>Buffers</td>\n<td style=\"text-align:center\">文件读写Buffer</td>\n<td style=\"text-align:center\">Cached</td>\n<td style=\"text-align:center\">缓存</td>\n<td style=\"text-align:center\">SwapCached</td>\n<td style=\"text-align:left\">缓存的交换空间</td>\n</tr>\n<tr>\n<td>Active</td>\n<td style=\"text-align:center\">最近被申请过的空间</td>\n<td style=\"text-align:center\">Inactive</td>\n<td style=\"text-align:center\">最近未被申请过的空间</td>\n<td style=\"text-align:center\">Active(anon)</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Inactive(anon)</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Active(file)</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Inactive(file)</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Unevictable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Unevictable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Mlocked</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>SwapTotal</td>\n<td style=\"text-align:center\">可用交换空间</td>\n<td style=\"text-align:center\">SwapFree</td>\n<td style=\"text-align:center\">可用交换空间</td>\n<td style=\"text-align:center\">Dirty</td>\n<td style=\"text-align:left\">等待写入磁盘的空间</td>\n</tr>\n<tr>\n<td>Writeback</td>\n<td style=\"text-align:center\">正在被写入磁盘的空间</td>\n<td style=\"text-align:center\">AnonPages</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Mapped</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>Shmem</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Slab</td>\n<td style=\"text-align:center\">kernel使用</td>\n<td style=\"text-align:center\">Sreclaimable</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>SUnreclaim</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">KernelStack</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">PageTables</td>\n<td style=\"text-align:left\">内存页映射表空间</td>\n</tr>\n<tr>\n<td>NFS_Unstable</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Bounce</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">WritebackTmp</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>CommitLimit</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Committed_AS</td>\n<td style=\"text-align:center\">完成workload最坏情况的内存使用情况</td>\n<td style=\"text-align:center\">VmallocTotal</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>VmallocUsed</td>\n<td style=\"text-align:center\">虚拟空间可映射的大小</td>\n<td style=\"text-align:center\">VmallocUsed</td>\n<td style=\"text-align:center\">已使用的虚拟空间映射大小</td>\n<td style=\"text-align:center\">VmallocChunk</td>\n<td style=\"text-align:left\">虚拟空间最大的虚拟空间块</td>\n</tr>\n<tr>\n<td>AnonHugePages</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Total</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Free</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>HugePages_Rsvd</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">HugePages_Surp</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">Hugepagesize</td>\n<td style=\"text-align:left\">..</td>\n</tr>\n<tr>\n<td>DirectMap4k</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">DirectMap2M</td>\n<td style=\"text-align:center\">..</td>\n</tr>\n</tbody>\n</table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjr2ad7d0001rgug6kkzifui","category_id":"cjjr2ad8c0005rgugrjyis39i","_id":"cjjr2ad9d000drgugcagllrdt"},{"post_id":"cjjr2ad8m0007rgugj72s0en3","category_id":"cjjr2ad96000argugte6s7vwr","_id":"cjjr2ad9e000grgugpbgd3nkw"}],"PostTag":[{"post_id":"cjjr2ad7d0001rgug6kkzifui","tag_id":"cjjr2ad8j0006rgug1uksm022","_id":"cjjr2ad9a000crguggjx9nkkp"},{"post_id":"cjjr2ad7u0003rgugmtxk3v2u","tag_id":"cjjr2ad8j0006rgug1uksm022","_id":"cjjr2ad9e000frgugyz02hdar"},{"post_id":"cjjr2ad8m0007rgugj72s0en3","tag_id":"cjjr2ad9d000ergugwo0jk9u6","_id":"cjjr2ad9f000irgugvbpi3r1h"},{"post_id":"cjjr2ad8y0008rgugre7ee4v8","tag_id":"cjjr2ad9f000hrgugrujfipl7","_id":"cjjr2ad9o000lrgugq7lx9yim"},{"post_id":"cjjr2ad8y0008rgugre7ee4v8","tag_id":"cjjr2ad9g000jrgug9giy4ge8","_id":"cjjr2ad9p000mrgugic1buvdk"},{"post_id":"cjjr2ad920009rguglt038yq0","tag_id":"cjjr2ad9h000krgugwqv9xonn","_id":"cjjr2ad9t000orguggg96b328"},{"post_id":"cjjr2ad920009rguglt038yq0","tag_id":"cjjr2ad9r000nrgug3zbooqqk","_id":"cjjr2ad9t000prgug3agsjcvq"}],"Tag":[{"name":"Aerospike","_id":"cjjr2ad8j0006rgug1uksm022"},{"name":"Bitmap","_id":"cjjr2ad9d000ergugwo0jk9u6"},{"name":"flink","_id":"cjjr2ad9f000hrgugrujfipl7"},{"name":"exactly-once","_id":"cjjr2ad9g000jrgug9giy4ge8"},{"name":"memory","_id":"cjjr2ad9h000krgugwqv9xonn"},{"name":"linux","_id":"cjjr2ad9r000nrgug3zbooqqk"}]}}